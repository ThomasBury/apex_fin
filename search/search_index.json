{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"apex_fin Documentation","text":""},{"location":"#goal","title":"\ud83c\udfaf Goal","text":"<p>apex_fin is an Agentic modular Python toolkit for building advanced financial analysis reports. It solves the challenge of transforming raw financial data into actionable, well-structured reports for analysts and business users.</p> <p>Key Capabilities:</p> <ul> <li>Ingests data from multiple sources (YahooFinance API, web search and can be extended easily using <code>Tools</code>)</li> <li>Extracts, normalizes, and analyzes financial information</li> <li>Generates comprehensive, customizable reports (Markdown)</li> <li>Supports agentic workflows and LLM-powered reasoning</li> <li>Configurable, using a <code>yaml</code>master file (risks to analyse, prompts, style, tools, model), see Features and Extensibility</li> </ul>"},{"location":"#intended-audience","title":"Intended Audience","text":"<ul> <li>Financial analysts and Finance enthousiasts</li> <li>Data engineers &amp; developers  </li> <li>Business intelligence teams</li> </ul>"},{"location":"#high-level-architecture","title":"\ud83c\udfd7\ufe0f High-Level Architecture","text":"<p>The report-building pipeline consists of:</p> <ol> <li>Input Sources: Yahoo Finance APIs</li> <li>Parsing &amp; Extraction: Structured data extraction, OCR, LLM-based field parsing</li> <li>Transformation &amp; Normalization: Data cleaning, schema mapping, enrichment</li> <li>Templating &amp; Report Generation: Modular templates, agent orchestration, LLM-driven sections</li> <li>Output: Markdown, JSON, PDF, or custom formats</li> </ol> <pre><code>flowchart TD\n    A[Ticker or company Input] --&gt; AA[Ticker look up and validation]\n    AA --&gt; B[Data Fetch Financial Data]\n    B --&gt; C[Analysis Agent]\n    B --&gt; D[Comparison Agent]\n    B --&gt; E[Thinking Agent]\n    B --&gt; F[News Agent]\n\n    C --&gt; G[Editor Agent]\n    D --&gt; G\n    E --&gt; G\n    F --&gt; G\n\n    G --&gt; H[Polishing Agent Optional]\n    H --&gt; I[Final Report Output]\n    G --&gt; I</code></pre>"},{"location":"#command-line-interface-cli","title":"\ud83d\udccb Command Line Interface (CLI)","text":"<p>All commands support <code>--config</code> for custom YAML, and <code>--output</code> for file export.</p> Command Purpose Example Usage <code>analyze</code> Company financial health analysis <code>python -m apex_fin.main analyze AAPL</code> <code>compare</code> Compare company to competitors <code>python -m apex_fin.main compare MSFT</code> <code>fullreport</code> Full multi-section financial report <code>python -m apex_fin.main fullreport AMZN</code> <code>think</code> Contextual risk &amp; policy reasoning <code>python -m apex_fin.main think GOOGL</code> <p>(Note: The <code>teamreport</code> command is currently experimental and not available in the main CLI.)</p> <p>Common Options:</p> <ul> <li><code>--output, -o</code>: Write report to file</li> <li><code>--config, -c</code>: Use custom YAML config</li> </ul>"},{"location":"#module-breakdown","title":"\ud83d\udce6 Module Breakdown","text":"Module / Subpackage Purpose / Key Classes &amp; Functions Integration Points API Reference <code>agents/</code> Specialized agents for analysis, comparison, reasoning Used by CLI and teams agents/index.md <code>analysis_agent</code> Core financial analysis Consumes parsed data analysis_agent.md <code>comparison_agent</code> Benchmarks vs. competitors Uses extracted peer data comparison_agent.md <code>thinking_agent</code> Contextual/macro risk analysis Invoked in <code>think</code>/team reports thinking_agent.md <code>full_report_agent</code> Orchestrates sequential report generation Used by <code>fullreport</code> command full_report_agent.md <code>models/</code> Data schemas Shared across agents models/index.md <code>prompts/</code> Instruction templates for LLMs Customizable per agent prompts/index.md <code>teams/</code> Multi-agent orchestration, team logic Used by <code>teamreport</code> (experimental) teams/index.md <code>config.py</code> Loads <code>.env</code> and YAML config, merges settings Used globally config.md <code>main.py</code> Typer CLI, command routing Entry point main.md"},{"location":"#features-extensibility","title":"\ud83d\udd27 Features &amp; Extensibility","text":"<ul> <li>Multi-Source Input: Easily add new data connectors as Agents' <code>Tools</code> (PDF, API, DB)</li> <li>LLM Integration: Swap LLM providers (OpenAI, Gemini, Azure) via config</li> <li>Bounding Box/Field Extraction: Supports OCR and spatial data (if enabled)</li> <li>Config-Driven Pipelines: Enable/disable agents, customize prompts, set thresholds</li> <li>Templating: Modular report templates, Markdown or JSON output</li> <li>Internationalization: Extendable for multi-language support</li> </ul> <p>How to Extend:</p> <ul> <li>Add Document Types: Implement new parser in <code>agents/</code> and register in CLI</li> <li>Extend Schemas: Add/modify Pydantic models in <code>models/</code></li> <li>Integrate LLM Providers: Add new backend in config and agent logic</li> <li>Customize Templates: Edit or override prompt files in <code>prompts/</code></li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>API Reference</li> <li>Module Details</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>This section provides an auto-generated API reference for the <code>apex_fin</code> package.</p> <ul> <li>API Documentation</li> </ul>"},{"location":"configuration/","title":"Detailed Configuration","text":"<p><code>apex-fin</code> uses a combination of an environment file (<code>.env</code>) for sensitive keys and a YAML file (<code>apex_fin.yaml</code>) for most other configurations. This allows for flexible and secure customization of the tool's behavior.</p>"},{"location":"configuration/#environment-file-env","title":"Environment File (<code>.env</code>)","text":"<p>The <code>.env</code> file is used to store sensitive information, primarily API keys. It should be placed in the root directory of the project and should not be committed to version control.</p> <p>Create a <code>.env</code> file in the project root with the following content:</p> <pre><code>GEMINI_API_KEY=\"YOUR_GEMINI_API_KEY_HERE\"\nReplace \"YOUR_GEMINI_API_KEY_HERE\" with your actual Gemini API key.\n</code></pre>"},{"location":"configuration/#yaml-configuration-apex_finyaml","title":"YAML Configuration (apex_fin.yaml)","text":"<p>The <code>apex_fin.yaml</code> file allows you to customize various aspects of the application, from LLM settings to report generation options and prompt overrides. If this file is not present in the project root, default settings (defined internally) will be used for these aspects. You can also specify a custom YAML configuration file path using the <code>--config</code> or <code>-c</code> CLI option.</p> <p>Settings in a custom YAML file will override the defaults, and environment variables (like <code>GEMINI_API_KEY</code>) always take precedence for their specific settings.</p> <p>Here's a breakdown of the <code>apex_fin.yaml</code> structure and available options (refer to your project's <code>apex_fin.yaml</code> for the most current example):</p> <pre><code>llm:\n  model: \"gemini/gemini-1.5-flash\"  # Specifies the LLM model to use (e.g., from LiteLLM supported models)\n  base_url: \"https://generativelanguage.googleapis.com/v1beta\"  # Optional: Custom base URL for the LLM API\n\nreport:\n  markdown_template_path: \"custom_templates/report_template.md\"  # Optional: Path to a custom Markdown template for the full report\n  enable_polishing: true  # Boolean: Whether to run the polishing agent on the full report for refinement\n  include_context: true # Boolean: Whether to include the contextual risk assessment section in the full report\n  include_news: true    # Boolean: Whether to include the financial news section in the full report\n\nprompts:\n  # Optional: Paths to custom prompt files. Paths are relative to the project root.\n  # If a path is provided, the content of that file will be used instead of the default internal prompt.\n  team: \"custom_prompts/team.txt\"\n  analysis: \"custom_prompts/analysis.txt\"\n  comparison: \"custom_prompts/comparison.txt\"\n  evaluation: \"custom_prompts/evaluation.txt\"\n  news: \"custom_prompts/news.txt\"\n  # Add other prompt keys here if your application supports more (e.g., risk-specific prompts)\n\nrisk:\n  enabled: [\"macroeconomic\", \"geopolitical\", \"climate\", \"regulatory\"] # List of risk types to include in the 'think' and 'fullreport' (if include_context is true)\n  guidelines:\n    macroeconomic: |\n      - Interest rate sensitivity\n      - FX volatility\n      - Inflation and central bank policy\n    geopolitical: |\n      - Policy instability\n      - Regional conflicts or sanctions\n      - Global supply chain disruptions\n    # Add guidelines for other enabled risks\n  tools:\n    macroeconomic: [\"DuckDuckGoTools\"] # List of tool names (from TOOL_REGISTRY in risk_tools.md) for each risk\n    geopolitical: [\"DuckDuckGoTools\"]\n    # Add tool configurations for other enabled risks\n</code></pre> <pre><code>llm:\n  model: \"gemini/gemini-2.0-flash\"  # gemini/gemini-2.5-flash-preview-05-20\n  base_url: \"https://generativelanguage.googleapis.com/v1beta\"  # Optional URL\n\nreport:\n  markdown_template_path: \"custom_templates/report_template.md\"  # Optional path for custom report template\n  enable_polishing: true  # Whether to run the polishing agent on the full report\n  include_context: true # Whether to include the contextual risk assessment section\n  include_news: true    # Boolean: Whether to include the financial news section in the full report\n\nprompts:\n  # Optional: Paths to custom prompt files. Paths are relative to the project root.\n  # If a path is provided, the content of that file will be used instead of the default internal prompt.\n  team: \"custom_prompts/team.txt\"  # Optional path to custom team prompt\n  analysis: \"custom_prompts/analysis.txt\"  # Optional path to custom analysis prompt\n  comparison: \"custom_prompts/comparison.txt\"  # Optional path to custom comparison prompt\n  evaluation: \"custom_prompts/evaluation.txt\"  # Optional path to custom evaluation prompt\n  news: \"custom_prompts/news.txt\"  # Optional path to custom news prompt\n\nrisk:\n  # List of risk types to include in the 'think' and 'fullreport' (if include_context is true)\n  # Guidelines must be provided for each risk type\n  enabled: [\"macroeconomic\", \"geopolitical\", \"climate\", \"regulatory\"]\n\n  guidelines:\n    macroeconomic: |\n      - Interest rate sensitivity\n      - FX volatility\n      - Inflation and central bank policy\n    geopolitical: |\n      - Policy instability\n      - Regional conflicts or sanctions\n      - Global supply chain disruptions\n    climate: |\n      - Carbon emissions exposure\n      - Physical climate risk (drought, flooding)\n      - Regulatory ESG disclosure risk\n    regulatory: |\n      - Ongoing compliance obligations\n      - Risk of new sectoral regulation\n      - Dependency on licensed operations\n\n  tools:\n    # List of tool names (from TOOL_REGISTRY in risk_tools.md) for each risk\n    # possible extention in next iterations\n    macroeconomic: [\"DuckDuckGoTools\"]\n    geopolitical: [\"DuckDuckGoTools\"]\n    climate: [\"DuckDuckGoTools\", \"ThinkingTools\"]\n    regulatory: [\"DuckDuckGoTools\"]\n</code></pre>"},{"location":"configuration/#key-sections","title":"Key Sections","text":"<ul> <li><code>llm</code>:</li> <li><code>model</code>: Defines the specific language model to be used (e.g., \"gemini/gemini-1.5-flash\"). Ensure this model is compatible with your LiteLLM setup and API key.</li> <li><code>base_url</code>: (Optional) If you are using a proxy or a self-hosted LLM that requires a custom API endpoint.</li> <li><code>report</code>:</li> <li><code>markdown_template_path</code>: (Optional) If you want to customize the structure of the final Markdown report, provide a path to your Jinja2 template file.</li> <li><code>enable_polishing</code>: Set to <code>true</code> to have a final LLM agent review and refine the entire report. Set to <code>false</code> to skip this step.</li> <li><code>include_context</code>: Set to <code>true</code> to include the \"Contextual Considerations\" section (generated by the ThinkingAgent) in the fullreport.</li> <li><code>include_news</code>: Set to <code>true</code> to include the \"Financial News\" section (generated by the NewsAgent) in the fullreport.</li> <li><code>prompts</code>:     Allows you to override the default system prompts used by various agents. Provide a file path (relative to the project root) for any prompt you wish to customize. See the \"Customizing Prompts\" documentation for more details.</li> <li><code>risk</code>:</li> <li><code>enabled</code>: A list of risk categories that the ThinkingAgent will analyze.</li> <li><code>guidelines</code>: A dictionary where each key is a risk name (from <code>enabled</code>) and the value is a multi-line string providing specific focus points or questions for the LLM to consider for that risk.</li> <li><code>tools</code>: A dictionary where each key is a risk name and the value is a list of tool names (e.g., \"DuckDuckGoTools\", \"ThinkingTools\") that the specialized risk agent can use.</li> </ul>"},{"location":"configuration/#settings-precedence","title":"Settings Precedence","text":"<p>Configuration settings are merged from multiple sources with the following precedence (highest to lowest):</p> <ol> <li>Environment Variables (e.g., <code>GEMINI_API_KEY</code> from <code>.env</code>).</li> <li>Custom YAML file (specified via <code>--config</code> CLI option).</li> <li>Default <code>apex_fin.yaml</code> (if present in the project root).</li> <li>Internal default application settings.</li> </ol> <p>This layered approach provides flexibility in managing your configurations for different environments or experiments.</p>"},{"location":"data_fetching/","title":"Data Fetching and Validation","text":"<p>The <code>apex_fin</code> application relies on fetching financial data for specified stock tickers. This process involves validating the user's input and then retrieving the relevant financial information from a data source.</p>"},{"location":"data_fetching/#ticker-validation","title":"Ticker Validation","text":"<p>User input for a stock ticker might not always be in the correct format or could be a company name instead of a symbol. The ticker_validation.py module handles this validation process.</p> <p>The primary function is <code>validate_and_get_ticker</code>. This function takes a string input (which can be a ticker symbol or a company name) and uses the <code>yfinance.Search</code> functionality to find the most likely corresponding ticker symbol and company name.</p> <p>If a valid ticker is found, the function returns a tuple containing the validated ticker symbol and the company name. If no valid ticker is found, it returns <code>None</code>. This ensures that subsequent data fetching operations use a standardized and correct ticker symbol.</p>"},{"location":"data_fetching/#financial-data-fetching","title":"Financial Data Fetching","text":"<p>Once a valid ticker symbol is obtained, the yf_fetcher.py module is used to retrieve detailed financial data.</p> <p>The core class in this module is <code>YFinanceFinancialAnalyzer</code>. This class is initialized with a validated ticker symbol. It utilizes the <code>yfinance</code> library internally to fetch various types of financial information, such as:</p> <ul> <li>Key financial metrics (e.g., current price, PE ratios, market cap)</li> <li>Analyst recommendations</li> <li>Earnings information</li> <li>Company profile details</li> <li>Shareholder information</li> <li>Corporate actions (dividends, splits)</li> <li>Fund-specific information (for ETFs and Mutual Funds)</li> </ul> <p>The <code>YFinanceFinancialAnalyzer</code> class includes methods to process and format the raw data fetched from <code>yfinance</code>, handling potential missing values and converting data types (like timestamps) into a consistent format suitable for consumption by other parts of the application, particularly the LLM agents.</p> <p>The main method for retrieving a comprehensive snapshot of data is <code>get_financial_snapshot_dict</code>, which returns the data as a Python dictionary, or <code>get_financial_snapshot_json</code> which returns it as a JSON string.</p> <p>This modular approach separates the concerns of input validation and data retrieval, making the process robust and easier to maintain.</p>"},{"location":"how_to/","title":"How-To Guide: Using the CLI","text":"<p>This guide explains how to use the command-line interface (CLI) for the <code>apex-fin</code> application to generate financial analysis reports.</p> <p>The CLI is powered by <code>typer</code> and provides several commands for different types of analysis.</p>"},{"location":"how_to/#available-commands","title":"Available Commands","text":"<p>All commands support the following optional flags:</p> <ul> <li><code>--config &lt;path&gt;</code> or <code>-c &lt;path&gt;</code>: Specify a custom YAML configuration file to override default settings.</li> <li><code>--output &lt;path&gt;</code> or <code>-o &lt;path&gt;</code>: Write the report output to a specified Markdown file instead of printing to the console.</li> </ul> <p>Here are the main commands:</p>"},{"location":"how_to/#analyze-ticker","title":"<code>analyze &lt;ticker&gt;</code>","text":"<p>Runs a financial health analysis for a single company.</p> <ul> <li><code>&lt;ticker&gt;</code>: The stock ticker symbol (e.g., <code>AAPL</code>, <code>MSFT</code>).</li> </ul> <p>Example:</p> <pre><code>uv run python -m apex_fin.main analyze AAPL\n</code></pre>"},{"location":"how_to/#compare-ticker","title":"<code>compare &lt;ticker&gt;</code>","text":"<p>Compares a company to its top competitors.</p> <ul> <li><code>&lt;ticker&gt;</code>: The stock ticker symbol of the primary company to compare (e.g., <code>GOOGL</code>, <code>TSLA</code>).</li> </ul> <p>Example:</p> <pre><code>uv run python -m apex_fin.main compare MSFT\n</code></pre>"},{"location":"how_to/#think-ticker","title":"<code>think &lt;ticker&gt;</code>","text":"<p>Performs contextual reasoning and policy checks for a stock, focusing on macroeconomic and geopolitical risks.</p> <ul> <li><code>&lt;ticker&gt;</code>: The stock ticker symbol for which to perform contextual reasoning (e.g., <code>NVDA</code>, <code>VZ</code>).</li> </ul> <p>Example:</p> <pre><code>uv run python -m apex_fin.main think GOOGL\n</code></pre>"},{"location":"how_to/#fullreport-ticker","title":"<code>fullreport &lt;ticker&gt;</code>","text":"<p>Generates a complete financial report for a stock, combining multiple analysis sections.</p> <ul> <li><code>&lt;ticker&gt;</code>: The stock ticker symbol for which to generate a full report (e.g., <code>JPM</code>, <code>XOM</code>).</li> </ul> <p>Example:</p> <pre><code>uv run python -m apex_fin.main fullreport AMZN\n</code></pre> <p>Example with output to file:</p> <pre><code>uv run python -m apex_fin.main fullreport TSLA --output tsla_report.md\n</code></pre> <p>This guide covers the basic usage of the <code>apex-fin</code> CLI commands. Refer to the API Reference for more detailed information on the underlying modules and functions.</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide provides instructions on how to set up and configure the <code>apex-fin</code> project using <code>uv</code> for dependency management.</p>"},{"location":"installation/#setup","title":"\ud83d\udee0\ufe0f Setup","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/your-org/apex_fin.git\ncd apex_fin\n</code></pre> <p>Replace <code>https://github.com/your-org/apex_fin.git</code> with the actual repository URL if it's different.</p> </li> <li> <p>Install dependencies:     Use <code>uv</code> to synchronize the project's dependencies based on the <code>pyproject.toml</code> file.</p> <pre><code>uv sync\n</code></pre> </li> <li> <p>Configuration:    Detailed configuration options for <code>apex-fin</code>, including environment variables and the <code>apex_fin.yaml</code> file, are covered in the Detailed Configuration guide.</p> </li> </ol> <p>For information on customizing the prompts used by the LLM agents, refer to the Customizing Prompts documentation.</p>"},{"location":"overview/","title":"Overview and Architecture","text":""},{"location":"overview/#agents-their-responsibilities","title":"Agents &amp; Their Responsibilities","text":"<p>Each agent module defines a part of the logic chain:</p> Agent Purpose API Reference <code>analysis_agent.py</code> Performs core financial analysis of a single company analysis_agent.md <code>comparison_agent.py</code> Benchmarks company vs. competitors comparison_agent.md <code>thinking_agent.py</code> Injects macroeconomic and contextual risk analysis thinking_agent.md <code>evaluation_agent.py</code> Assesses report quality and gives feedback (Used internally) evaluation_agent.md <code>refinement_agent.py</code> (if enabled) Revises sections based on feedback (Used internally) refinement_agent.md <code>full_report_agent.py</code> Generates a predefined full report sequence full_report_agent.md <code>competitor_agent.py</code> (Potentially) gathers or ranks competitors (Used internally) competitor_agent.md <code>team_report.py</code> Runs multi-agent orchestration as a \"team\" (Experimental, not in CLI) report_team.md <code>base.py</code> Defines base logic/abstractions for agent execution base.md <p>These are orchestrated either directly (CLI commands) or via a central planner (<code>team_report</code>).</p>"},{"location":"overview/#prompts-instructions-in-prompts","title":"Prompts (Instructions) \u2013 in <code>prompts/</code>","text":"<p>Each agent is driven by its associated prompt file, which defines:</p> File Drives... API Reference <code>analysis_instructions.py</code> How the company analysis is done analysis_instructions.md <code>comparison_instructions.py</code> What comparison logic is followed comparison_instructions.md <code>thinking_instructions.py</code> How contextual factors are considered thinking_instructions.md <code>evaluation_instructions.py</code> How quality is evaluated evaluation_instructions.md <code>team_instructions.py</code> Master prompt coordinating all agents team_instructions.md <p>These prompts are often static but can be overridden. The default prompt files are located in reference/apex_fin/prompts/index.md.</p> <p>They could be:</p> <ul> <li>Injected with runtime context (e.g., <code>ticker</code>, <code>sector</code>)</li> <li>Overridden by users (via config or custom folder)</li> </ul>"},{"location":"overview/#configuration-configpy-yaml","title":"Configuration (<code>config.py</code> + YAML)","text":"<p>Settings affect how the app behaves globally:</p> Source Drives... API Reference <code>.env</code> + <code>pydantic-settings</code> Model/backend configs (e.g., <code>LLM_MODEL</code>, <code>GEMINI_API_KEY</code>) <code>apex_config.yaml</code> (optional) Feature toggles: enabled agents, caching, section style, thresholds, prompt override paths, etc. CLI <code>--config</code> flag Loads custom YAML for session <p>Configuration settings from <code>.env</code> and <code>apex_config.yaml</code> are merged, with YAML settings taking precedence. The resulting settings are managed by the config.md class.</p>"},{"location":"overview/#runtime-parameters-from-cli","title":"Runtime Parameters (from CLI)","text":"<p>Your <code>typer</code> CLI exposes runtime flags that control execution:</p> Flag Impact <code>--output/-o</code> Writes the report to file <code>--config/-c</code> Specifies a custom config YAML file"},{"location":"overview/#model-architecture","title":"Model Architecture","text":"<p>Depending on config, you can switch:</p> <ul> <li>Which LLM provider (e.g., Azure OpenAI vs Gemini)</li> <li>The <code>BASE_URL</code> or <code>LLM_MODEL</code></li> <li>Potentially prompt format based on LLM requirements</li> </ul>"},{"location":"overview/#report-logic-hardcoded-or-template-driven","title":"Report Logic (Hardcoded or Template-Driven)","text":"<p>Markdown structure is usually:</p> <pre><code># Full Investment Report: {TICKER}\n\n## Company Analysis\n&lt;generated by analysis_agent&gt;\n\n## Competitor Comparison\n&lt;comparison_agent&gt;\n\n## Contextual Considerations\n&lt;thinking_agent&gt;\n\n## Recommendation\n&lt;output or summary&gt;\n</code></pre> <p>But this could be dynamic or user-specified in future.</p>"},{"location":"overview/#agent-output-flow-orchestration-logic","title":"Agent Output Flow / Orchestration Logic","text":"<p>Main orchestration types:</p> <ul> <li>Single agent invocation (e.g. <code>analyze</code>, <code>compare</code>)</li> <li>Sequential flow (e.g., <code>fullreport</code> command)</li> <li>Multi-agent coordination (e.g., <code>teamreport</code> - currently experimental)</li> <li>Dynamic routing based on natural language (not currently exposed in CLI)</li> </ul> <p>In advanced cases (like team-based), outputs are passed between agents, and feedback evaluation can control whether a report is generated or revision is triggered.</p>"},{"location":"prompts_customization/","title":"Customizing Prompts","text":"<p>The behavior of the LLM agents in <code>apex-fin</code> is heavily guided by prompts. You can customize these prompts to tailor the analysis, tone, and output format to your specific needs.</p>"},{"location":"prompts_customization/#how-prompts-are-loaded","title":"How Prompts are Loaded","text":"<p>Prompts are loaded using the <code>load_prompt</code> function found in prompt_loader.md. This function allows you to specify paths to custom prompt files in your <code>apex_fin.yaml</code> configuration.</p> <p>If a path is provided in <code>apex_fin.yaml</code> for a specific prompt (e.g., <code>prompts.analysis</code>), <code>apex-fin</code> will attempt to load the content of that file. If the path is not specified, or the file cannot be loaded, a default, hardcoded prompt within the respective agent-building module will be used as a fallback.</p>"},{"location":"prompts_customization/#configuring-custom-prompt-paths","title":"Configuring Custom Prompt Paths","text":"<p>In your <code>apex_fin.yaml</code> file, under the <code>prompts</code> section, you can specify paths to your custom prompt files. These paths should be relative to the project root directory.</p> <p>Example <code>apex_fin.yaml</code> snippet:</p> <pre><code>prompts:\n  team: \"custom_prompts/my_custom_team_prompt.txt\"\n  analysis: \"custom_prompts/detailed_analysis_instructions.md\"\n  comparison: \"custom_prompts/competitor_focus_prompt.txt\"\n  # ... other prompts\n</code></pre> <p>In this example:</p> <ul> <li>The Team Agent would use the content from <code>custom_prompts/my_custom_team_prompt.txt</code>.</li> <li>The Analysis Agent would use <code>custom_prompts/detailed_analysis_instructions.md</code>.</li> </ul> <p>Create a directory like <code>custom_prompts</code> in your project root to store your custom prompt files.</p>"},{"location":"prompts_customization/#writing-effective-prompts","title":"Writing Effective Prompts","text":"<p>When writing custom prompts, consider the following:</p> <ul> <li>Be Specific and Clear: Clearly define the agent's persona, goal, expected input (if any), required tasks, and desired output format.</li> <li>Structure: Use Markdown or clear text formatting within your prompt files to delineate sections like \"Persona,\" \"Goal,\" \"Input,\" \"Tasks,\" \"Output Format,\" and \"Constraints.\" This helps the LLM understand the instructions better.</li> <li>Output Format Enforcement: If you need a specific output format (e.g., Markdown tables, JSON), explicitly state this and provide examples if necessary. The <code>ANALYSIS_PROMPT</code> in analysis_instructions.md is a good example of enforcing a Markdown table structure.</li> <li>Constraints: Include critical constraints, such as \"Do NOT include any introductory phrases\" or \"Base your analysis strictly on the provided data.\"</li> <li>Iterate: Prompt engineering is often an iterative process. Start with a base prompt (you can copy the defaults from prompts/index.md) and refine it based on the agent's output.</li> <li>Placeholders and Templating: Some prompts, like the <code>RISK_PROMPT_TEMPLATE</code> in risk_instructions.md, use Jinja2 templating. This allows dynamic information (e.g., <code>risk_name</code>, <code>context</code>, <code>focus</code>) to be injected into the prompt at runtime. If you are customizing such prompts, ensure your custom file maintains the required template variables.</li> </ul>"},{"location":"prompts_customization/#example-customizing-the-analysis-prompt","title":"Example: Customizing the Analysis Prompt","text":"<p>Suppose you want the Analysis Agent to focus more on future outlook and less on historical data.</p> <ol> <li>Copy the default prompt: Start by copying the content of analysis_instructions.md (e.g., <code>AUTO_ANALYSIS_PROMPT</code>) into a new file, say <code>custom_prompts/future_focused_analysis.txt</code>.</li> <li>Modify the content: Adjust the instructions within <code>future_focused_analysis.txt</code> to emphasize future prospects, potential growth drivers, and analyst forward-looking statements. You might reduce the emphasis on past performance metrics.</li> <li> <p>Update <code>apex_fin.yaml</code>:</p> <pre><code>prompts:\n  analysis: \"custom_prompts/future_focused_analysis.txt\"\n</code></pre> <p>Now, when the Analysis Agent is run, it will use your custom instructions.</p> </li> </ol>"},{"location":"prompts_customization/#default-prompts-location","title":"Default Prompts Location","text":"<p>The default prompts are located within the prompts/index.md directory (e.g., <code>analysis_instructions.py</code>, <code>comparison_instructions.py</code>, etc.). Reviewing these files is a good starting point for understanding their structure and content before creating your own customizations.</p>"},{"location":"reference/apex_fin/","title":"<code>apex_fin</code> package","text":"<ul> <li> <code>agents</code> sub-package </li> <li> <code>config</code> module </li> <li> <code>main</code> module </li> <li> <code>models</code> sub-package </li> <li> <code>prompts</code> sub-package </li> <li> <code>teams</code> sub-package </li> <li> <code>templates</code> sub-package </li> <li> <code>utils</code> sub-package </li> </ul>"},{"location":"reference/apex_fin/__init__/","title":"init","text":""},{"location":"reference/apex_fin/__init__/#apex_fin","title":"<code>apex_fin</code>","text":""},{"location":"reference/apex_fin/config/","title":"Config","text":""},{"location":"reference/apex_fin/config/#apex_fin.config","title":"<code>apex_fin.config</code>","text":""},{"location":"reference/apex_fin/main/","title":"Main","text":""},{"location":"reference/apex_fin/main/#apex_fin.main","title":"<code>apex_fin.main</code>","text":"<p>Typer-powered CLI for the Financial Agent application. Supports modular and team-based report generation workflows.</p>"},{"location":"reference/apex_fin/main/#apex_fin.main.analyze","title":"<code>analyze(ticker)</code>","text":"<p>Run a financial health analysis for a given company ticker.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker symbol for the company to analyze. Example: \"AAPL\", \"MSFT\".</p> required Source code in <code>src/apex_fin/main.py</code> <pre><code>@app.command()\n@handle_cli_errors\ndef analyze(ticker: str) -&gt; None:\n    \"\"\"\n    Run a financial health analysis for a given company ticker.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker symbol for the company to analyze.\n        Example: \"AAPL\", \"MSFT\".\n    \"\"\"\n    safe_ticker = sanitize_ticker(ticker)\n    typer.echo(f\"Fetching financial data for {safe_ticker}...\")\n\n    # Setup logger for _fetch_financial_data_for_agent\n    cli_logger = logging.getLogger(\"apex_fin.cli.analyze\")\n    if not logging.getLogger().hasHandlers(): # Basic config if not already set up\n        logging.basicConfig(\n            level=logging.INFO,\n            format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n        )\n\n    input_json_str = _fetch_financial_data_for_agent(safe_ticker, cli_logger)\n\n    # Crude check for error in fetched data; _fetch_financial_data_for_agent returns a JSON string\n    if '\"error\":' in input_json_str and \"Data pre-fetch failed\" in input_json_str:\n        typer.echo(f\"Error: Could not fetch financial data for {safe_ticker}. Details: {input_json_str}\")\n        raise typer.Exit(code=1)\n\n    typer.echo(f\"Running analysis for {safe_ticker}...\")\n    agent = build_auto_analysis_agent()\n    response = agent.run(input_json_str) # Pass the pre-fetched JSON data string\n    typer.echo(_get_content_from_result(response))\n</code></pre>"},{"location":"reference/apex_fin/main/#apex_fin.main.compare","title":"<code>compare(ticker)</code>","text":"<p>Compare a company to its top competitors.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker symbol for the primary company to compare. Example: \"GOOGL\", \"TSLA\".</p> required Source code in <code>src/apex_fin/main.py</code> <pre><code>@app.command()\n@handle_cli_errors\ndef compare(ticker: str) -&gt; None:\n    \"\"\"\n    Compare a company to its top competitors.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker symbol for the primary company to compare.\n        Example: \"GOOGL\", \"TSLA\".\n    \"\"\"\n    safe_ticker = sanitize_ticker(ticker)\n    report = compare_company(safe_ticker)\n    typer.echo(_get_content_from_result(report))\n</code></pre>"},{"location":"reference/apex_fin/main/#apex_fin.main.full_report","title":"<code>full_report(ticker, output=typer.Option(None, '--output', '-o', help='Optional path to write the report as a Markdown file.'))</code>","text":"<p>Run a complete financial report for a stock.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker symbol for which to generate a full report. Example: \"JPM\", \"XOM\".</p> required Source code in <code>src/apex_fin/main.py</code> <pre><code>@app.command(name=\"fullreport\")\n@handle_cli_errors\ndef full_report(\n    ticker: str,\n    output: Optional[typer.FileTextWrite] = typer.Option(\n        None,\n        \"--output\",\n        \"-o\",\n        help=\"Optional path to write the report as a Markdown file.\",\n    ),\n) -&gt; None:\n    \"\"\"\n    Run a complete financial report for a stock.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker symbol for which to generate a full report.\n        Example: \"JPM\", \"XOM\".\n    \"\"\"\n    safe_ticker = sanitize_ticker(ticker)\n    report = build_full_report(safe_ticker)\n    typer.echo(_get_content_from_result(report))\n    if output:\n        output.write(report)\n        typer.echo(f\"Report written to: {output.name}\")\n    else:\n        typer.echo(report)\n</code></pre>"},{"location":"reference/apex_fin/main/#apex_fin.main.handle_cli_errors","title":"<code>handle_cli_errors(func)</code>","text":"<p>Decorator to catch exceptions in CLI commands and exit.</p> <p>Wraps a CLI command function to provide standardized error handling. If an exception occurs during the command's execution, it prints an error message to stderr and exits the application with a status code of 1.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable[..., Any]</code> <p>The CLI command function to wrap.</p> required <p>Returns:</p> Type Description <code>Callable[..., Any]</code> <p>The wrapped function with error handling.</p> Source code in <code>src/apex_fin/main.py</code> <pre><code>def handle_cli_errors(func: Callable) -&gt; Callable:\n    \"\"\"\n    Decorator to catch exceptions in CLI commands and exit.\n\n    Wraps a CLI command function to provide standardized error handling.\n    If an exception occurs during the command's execution, it prints\n    an error message to stderr and exits the application with a status code of 1.\n\n    Parameters\n    ----------\n    func : Callable[..., Any]\n        The CLI command function to wrap.\n\n    Returns\n    -------\n    Callable[..., Any]\n        The wrapped function with error handling.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            typer.echo(f\"[ERROR] Command failed: {e}\", err=True)\n            # For more detailed debugging, uncomment the next two lines:\n            # import traceback\n            # typer.echo(traceback.format_exc(), err=True)\n            raise typer.Exit(code=1)\n\n    return wrapper\n</code></pre>"},{"location":"reference/apex_fin/main/#apex_fin.main.main","title":"<code>main(config_path=typer.Option(None, '--config', '-c', help='Optional path to custom YAML configuration file.'))</code>","text":"<p>Load optional YAML configuration at CLI startup.</p> <p>This callback function is executed before any command. It allows users to specify a custom configuration file path, which will override the default settings.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Optional[str]</code> <p>The path to a custom YAML configuration file. If None, default configuration is used. Defaults to None.</p> <code>Option(None, '--config', '-c', help='Optional path to custom YAML configuration file.')</code> Source code in <code>src/apex_fin/main.py</code> <pre><code>@app.callback()\ndef main(\n    config_path: Optional[str] = typer.Option(\n        None, \"--config\", \"-c\", help=\"Optional path to custom YAML configuration file.\"\n    ),\n):\n    \"\"\"\n    Load optional YAML configuration at CLI startup.\n\n    This callback function is executed before any command. It allows\n    users to specify a custom configuration file path, which will\n    override the default settings.\n\n    Parameters\n    ----------\n    config_path : Optional[str], optional\n        The path to a custom YAML configuration file.\n        If None, default configuration is used.\n        Defaults to None.\n    \"\"\"\n    global settings\n    user_config = load_user_config(config_path)\n    settings = MergedSettings(env_settings, user_config)\n</code></pre>"},{"location":"reference/apex_fin/main/#apex_fin.main.sanitize_ticker","title":"<code>sanitize_ticker(ticker)</code>","text":"<p>Sanitize a stock ticker string for safe use.</p> <p>Removes non-alphanumeric characters, converts to uppercase, and truncates to a maximum of 10 characters.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The raw stock ticker string.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The sanitized stock ticker string.</p> Source code in <code>src/apex_fin/main.py</code> <pre><code>def sanitize_ticker(ticker: str) -&gt; str:\n    \"\"\"\n    Sanitize a stock ticker string for safe use.\n\n    Removes non-alphanumeric characters, converts to uppercase,\n    and truncates to a maximum of 10 characters.\n\n    Parameters\n    ----------\n    ticker : str\n        The raw stock ticker string.\n\n    Returns\n    -------\n    str\n        The sanitized stock ticker string.\n    \"\"\"\n\n    return re.sub(r\"[^A-Z0-9]\", \"\", ticker.upper())[:10]\n</code></pre>"},{"location":"reference/apex_fin/main/#apex_fin.main.think","title":"<code>think(ticker)</code>","text":"<p>Perform contextual reasoning and policy checks for a stock.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker symbol for which to perform contextual reasoning. Example: \"NVDA\", \"VZ\".</p> required Source code in <code>src/apex_fin/main.py</code> <pre><code>@app.command()\n@handle_cli_errors\ndef think(ticker: str) -&gt; None:\n    \"\"\"\n    Perform contextual reasoning and policy checks for a stock.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker symbol for which to perform contextual reasoning.\n        Example: \"NVDA\", \"VZ\".\n    \"\"\"\n    safe_ticker = sanitize_ticker(ticker)\n    # Directly use the thinking_agent for the 'think' command\n    agent = build_thinking_agent(safe_ticker)  # This agent is a Team\n    # The prompt here is for the Team's LLM to orchestrate its members.\n    # The internal instructions within build_thinking_agent guide the output structure.\n    prompt_for_thinking_team = f\"Generate a comprehensive risk assessment for {safe_ticker} based on its financial summary.\"\n    response = agent.run(prompt_for_thinking_team)\n    typer.echo(_get_content_from_result(response))\n</code></pre>"},{"location":"reference/apex_fin/agents/","title":"<code>apex_fin/agents</code> package","text":"<ul> <li> <code>analysis_agent</code> module </li> <li> <code>base</code> module </li> <li> <code>comparison_agent</code> module </li> <li> <code>competitor_agent</code> module </li> <li> <code>evaluation_agent</code> module </li> <li> <code>full_report_agent</code> module </li> <li> <code>news_agent</code> module </li> <li> <code>refinement_agent</code> module </li> <li> <code>thinking_agent</code> module </li> </ul>"},{"location":"reference/apex_fin/agents/__init__/","title":"init","text":""},{"location":"reference/apex_fin/agents/__init__/#apex_fin.agents","title":"<code>apex_fin.agents</code>","text":""},{"location":"reference/apex_fin/agents/analysis_agent/","title":"Analysis agent","text":""},{"location":"reference/apex_fin/agents/analysis_agent/#apex_fin.agents.analysis_agent","title":"<code>apex_fin.agents.analysis_agent</code>","text":"<p>Analysis Agent that retrieves and summarizes the financial health of a given company.</p>"},{"location":"reference/apex_fin/agents/analysis_agent/#apex_fin.agents.analysis_agent.FinancialDataFetcherTool","title":"<code>FinancialDataFetcherTool</code>","text":""},{"location":"reference/apex_fin/agents/analysis_agent/#apex_fin.agents.analysis_agent.FinancialDataFetcherTool.get_financial_data_json","title":"<code>get_financial_data_json(ticker)</code>","text":"<p>Fetches comprehensive financial data and returns it as a JSON string.</p> <p>Fetches comprehensive financial data using YFinanceFinancialAnalyzer and returns it as a JSON string. The input ticker is first validated and potentially corrected.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker symbol for which to fetch financial data.</p> required <p>Returns:</p> Type Description <code>str</code> <p>A JSON string containing the financial data, or an error message if data fetching fails.</p> Source code in <code>src/apex_fin/agents/analysis_agent.py</code> <pre><code>@tool(description=\"Fetches comprehensive financial data for a given stock ticker. Input should be the stock ticker symbol. Returns a JSON string of the data.\")\ndef get_financial_data_json(self, ticker: str) -&gt; str:\n    \"\"\"Fetches comprehensive financial data and returns it as a JSON string.\n\n    Fetches comprehensive financial data using YFinanceFinancialAnalyzer\n    and returns it as a JSON string.\n    The input ticker is first validated and potentially corrected.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker symbol for which to fetch financial data.\n\n    Returns\n    -------\n    str\n        A JSON string containing the financial data, or an error message\n        if data fetching fails.\n    \"\"\"\n    try:\n        analyzer = YFinanceFinancialAnalyzer(ticker)\n        # Uses default num_news_stories and num_financial_periods from get_financial_snapshot_dict\n        data_dict = analyzer.get_financial_snapshot_dict()\n        return json.dumps(data_dict)\n    except Exception as e:\n        return json.dumps({\"error\": f\"Failed to fetch data for {ticker}: {str(e)}\"})\n</code></pre>"},{"location":"reference/apex_fin/agents/analysis_agent/#apex_fin.agents.analysis_agent.build_auto_analysis_agent","title":"<code>build_auto_analysis_agent()</code>","text":"<p>Construct and configure a financial analysis agent.</p> <p>This agent uses YFinanceFinancialAnalyzer (via a custom tool) to fetch comprehensive data for a stock ticker in a single call. It then uses an LLM to generate a markdown summary of this data and returns both the summary and the raw JSON data.</p> <p>Returns:</p> Type Description <code>Agent</code> <p>An instance of the <code>agno.agent.Agent</code> class, configured with financial tools and specific instructions based on the chosen mode.</p> Source code in <code>src/apex_fin/agents/analysis_agent.py</code> <pre><code>def build_auto_analysis_agent() -&gt; Agent:\n    \"\"\"\n    Construct and configure a financial analysis agent.\n\n    This agent uses YFinanceFinancialAnalyzer (via a custom tool) to fetch\n    comprehensive data for a stock ticker in a single call. It then uses an LLM\n    to generate a markdown summary of this data and returns both the summary\n    and the raw JSON data.\n\n    Returns\n    -------\n    Agent\n        An instance of the `agno.agent.Agent` class, configured with\n        financial tools and specific instructions based on the chosen mode.\n\n    \"\"\"\n    tools = [ThinkingTools(), _get_financial_data_for_report]\n\n    # Load the base analy prompt\n    base_analysis_prompt = load_prompt(settings.prompt_paths.analysis, AUTO_ANALYSIS_PROMPT)\n\n    # Add a strict instruction to ensure only Markdown is output, without conversational preambles\n    strict_output_instruction = (\n        \"\\n\\nIMPORTANT: Do NOT include any introductory phrases, conversational remarks or system commentary. \"\n\n    )\n    instructions = [base_analysis_prompt + strict_output_instruction]\n\n    return create_agent(\n        tools=tools,\n        instructions=instructions,\n        markdown=True,  # Output is a JSON object\n        # response_model=AnalysisResponse,  # Enforce the new response structure\n        show_tool_calls=True,\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/base/","title":"Base","text":""},{"location":"reference/apex_fin/agents/base/#apex_fin.agents.base","title":"<code>apex_fin.agents.base</code>","text":""},{"location":"reference/apex_fin/agents/base/#apex_fin.agents.base.build_base_risk_agent","title":"<code>build_base_risk_agent(risk_name, context, tools=None, instructions=None)</code>","text":"<p>Build a standardized risk assessment agent for the given risk type.</p> <p>Parameters:</p> Name Type Description Default <code>risk_name</code> <code>str</code> <p>The risk type (e.g., \"macroeconomic\", \"esg\") to be assessed.</p> required <code>context</code> <code>str</code> <p>Markdown-formatted financial summary. Used if instructions are not provided, but providing pre-rendered instructions is preferred.</p> required <code>tools</code> <code>Optional[list[Any]]</code> <p>Optional list of tools to provide to the agent.</p> <code>None</code> <code>instructions</code> <code>Optional[List[str]]</code> <p>Pre-rendered instructions for the agent. If provided, these are used directly.</p> <code>None</code> <p>Returns:</p> Type Description <code>Agent</code> <p>An Agent instance configured for the specified risk.</p> Source code in <code>src/apex_fin/agents/base.py</code> <pre><code>def build_base_risk_agent(\n    risk_name: str,\n    context: str,\n    tools: Optional[list[Any]] = None,\n    instructions: Optional[List[str]] = None,\n) -&gt; Agent:\n    \"\"\"\n    Build a standardized risk assessment agent for the given risk type.\n\n    Parameters\n    ----------\n    risk_name : str\n        The risk type (e.g., \"macroeconomic\", \"esg\") to be assessed.\n    context : str\n        Markdown-formatted financial summary. Used if instructions are not provided,\n        but providing pre-rendered instructions is preferred.\n    tools : Optional[list[Any]]\n        Optional list of tools to provide to the agent.\n    instructions : Optional[List[str]]\n        Pre-rendered instructions for the agent. If provided, these are used directly.\n\n    Returns\n    -------\n    Agent\n        An Agent instance configured for the specified risk.\n    \"\"\"\n    final_instructions: List[str]\n    if instructions:\n        final_instructions = instructions\n    else:\n        # Fallback to generate instructions if not provided (though thinking_agent should provide them)\n        guideline = settings.risk_guidelines.get(risk_name)\n        if guideline is None or not guideline.strip():\n            raise ValueError(\n                f\"Missing or empty guideline for risk '{risk_name}' in config.risk.guidelines and no pre-rendered instructions provided.\"\n            )\n        prompt_content = RISK_PROMPT_TEMPLATE.render(\n            risk_name=risk_name, context=context, focus=guideline.strip()\n        )\n        final_instructions = [prompt_content]\n\n    return create_agent(\n        name=risk_name.replace(\"_\", \" \").title() + \" Agent\",\n        description=f\"{risk_name.title()} Risk Assessment\",\n        instructions=final_instructions,\n        tools=tools or [],\n        markdown=True,\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/base/#apex_fin.agents.base.create_agent","title":"<code>create_agent(name=None, tools=None, description='', instructions=None, markdown=True, show_tool_calls=True, response_model=None)</code>","text":"<p>Create and configure a standardized <code>agno.agent.Agent</code> instance.</p> <p>This factory function simplifies the creation of agents by providing a default LiteLLM model configuration (Gemini, using settings from the <code>config</code> module) and common agent parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the agent. Defaults to None, in which case the agent might be unnamed or receive a default name from the framework.</p> <code>None</code> <code>tools</code> <code>List[Any]</code> <p>A list of tools to be made available to the agent. Defaults to an empty list.</p> <code>None</code> <code>description</code> <code>str</code> <p>A high-level description of the agent's purpose or capabilities. Defaults to an empty string.</p> <code>''</code> <code>instructions</code> <code>List[str]</code> <p>A list of specific instructions or guidelines for the agent's behavior and response generation. Defaults to an empty list.</p> <code>None</code> <code>markdown</code> <code>bool</code> <p>If True, the agent is configured to prefer Markdown in its output. Defaults to True.</p> <code>True</code> <code>show_tool_calls</code> <code>bool</code> <p>If True, tool invocation details will be included in the agent's logging or output, aiding in debugging and transparency. Defaults to True.</p> <code>True</code> <code>response_model</code> <code>type[BaseModel] | None</code> <p>A Pydantic BaseModel class that defines the expected structure of the agent's response. If provided, the agent will attempt to format its output according to this schema. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Agent</code> <p>An instance of <code>agno.agent.Agent</code> configured with the specified parameters and a default LiteLLM (Gemini) model.</p> Source code in <code>src/apex_fin/agents/base.py</code> <pre><code>def create_agent(\n    name: Optional[str] = None, \n    tools: List[Any] | None = None,\n    description: str = \"\",\n    instructions: List[str] | None = None,\n    markdown: bool = True,\n    show_tool_calls: bool = True,\n    response_model: type[BaseModel] | None = None,\n) -&gt; Agent:\n    \"\"\"\n    Create and configure a standardized `agno.agent.Agent` instance.\n\n    This factory function simplifies the creation of agents by providing\n    a default LiteLLM model configuration (Gemini, using settings from\n    the `config` module) and common agent parameters.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name of the agent. Defaults to None, in which case the agent\n        might be unnamed or receive a default name from the framework.\n    tools : List[Any], optional\n        A list of tools to be made available to the agent.\n        Defaults to an empty list.\n    description : str, optional\n        A high-level description of the agent's purpose or capabilities.\n        Defaults to an empty string.\n    instructions : List[str], optional\n        A list of specific instructions or guidelines for the agent's\n        behavior and response generation. Defaults to an empty list.\n    markdown : bool, optional\n        If True, the agent is configured to prefer Markdown in its output.\n        Defaults to True.\n    show_tool_calls : bool, optional\n        If True, tool invocation details will be included in the agent's\n        logging or output, aiding in debugging and transparency.\n        Defaults to True.\n    response_model : type[BaseModel] | None, optional\n        A Pydantic BaseModel class that defines the expected structure\n        of the agent's response. If provided, the agent will attempt to\n        format its output according to this schema. Defaults to None.\n\n    Returns\n    -------\n    Agent\n        An instance of `agno.agent.Agent` configured with the specified\n        parameters and a default LiteLLM (Gemini) model.\n    \"\"\"\n    model = LiteLLM(\n        id=settings.LLM_MODEL,\n        api_key=settings.GEMINI_API_KEY,\n        name=\"Gemini\",\n        # api_base=settings.BASE_URL,\n    )\n\n    return Agent(\n        name=name,\n        model=model,\n        tools=tools if tools is not None else [],\n        description=description,\n        instructions=instructions if instructions is not None else [],\n        markdown=markdown,\n        show_tool_calls=show_tool_calls,\n        response_model=response_model,\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/comparison_agent/","title":"Comparison agent","text":""},{"location":"reference/apex_fin/agents/comparison_agent/#apex_fin.agents.comparison_agent","title":"<code>apex_fin.agents.comparison_agent</code>","text":"<p>Comparison Agent that takes a primary stock and compares it against its main competitors across valuation and financial health metrics.</p>"},{"location":"reference/apex_fin/agents/comparison_agent/#apex_fin.agents.comparison_agent.build_comparison_agent","title":"<code>build_comparison_agent()</code>","text":"<p>Constructs the comparison agent.</p> <p>Returns:</p> Type Description <code>Agent</code> <p>Configured comparison agent.</p> Source code in <code>src/apex_fin/agents/comparison_agent.py</code> <pre><code>def build_comparison_agent() -&gt; Agent:\n    \"\"\"\n    Constructs the comparison agent.\n\n    Returns\n    -------\n    Agent\n        Configured comparison agent.\n    \"\"\"\n    instructions = [load_prompt(settings.prompt_paths.comparison, COMPARISON_PROMPT)]\n    return create_agent(\n        tools=[ThinkingTools()],\n        show_tool_calls=False,\n        instructions=instructions,\n        markdown=True,\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/comparison_agent/#apex_fin.agents.comparison_agent.compare_company","title":"<code>compare_company(ticker_or_list_input, primary_company_analysis=None)</code>","text":"<p>Compares a company to its top competitors.</p> <p>Parameters:</p> Name Type Description Default <code>ticker_or_list_input</code> <code>Union[str, List[str]]</code> <p>The main stock ticker to analyze (e.g., \"AAPL\") or a list of tickers where the first is primary and the rest are competitors (e.g., [\"AAPL\", \"MSFT\", \"GOOG\"]). If a single ticker string is provided, or a list with only one ticker, competitors will be fetched automatically.</p> required <code>primary_company_analysis</code> <code>Optional[AnalysisResponse]</code> <p>Pre-computed AnalysisResponse object for the primary company. If provided, this avoids re-analyzing the primary company. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Markdown comparison report, or an error message string if input is invalid.</p> Source code in <code>src/apex_fin/agents/comparison_agent.py</code> <pre><code>def compare_company(\n    ticker_or_list_input: Union[str, List[str]],\n    primary_company_analysis: Optional[AnalysisResponse] = None,\n) -&gt; str:\n    \"\"\"\n    Compares a company to its top competitors.\n\n    Parameters\n    ----------\n    ticker_or_list_input : Union[str, List[str]]\n        The main stock ticker to analyze (e.g., \"AAPL\") or a list of tickers\n        where the first is primary and the rest are competitors (e.g., [\"AAPL\", \"MSFT\", \"GOOG\"]).\n        If a single ticker string is provided, or a list with only one ticker,\n        competitors will be fetched automatically.\n    primary_company_analysis : Optional[AnalysisResponse], optional\n        Pre-computed AnalysisResponse object for the primary company.\n        If provided, this avoids re-analyzing the primary company.\n        Defaults to None.\n\n    Returns\n    -------\n    str\n        Markdown comparison report, or an error message string if input is invalid.\n    \"\"\"\n    primary_ticker_upper, competitor_list = _parse_ticker_input(ticker_or_list_input, logger)\n\n    if not primary_ticker_upper:\n        # _parse_ticker_input already logged the specific error\n        if not isinstance(ticker_or_list_input, (str, list)) or \\\n           (isinstance(ticker_or_list_input, list) and not ticker_or_list_input):\n            return \"Error: An empty or invalid list of tickers was provided for comparison.\"\n        return \"Error: Invalid input type for comparison. Provide a ticker string or a list of tickers.\"\n\n    logger.info(f\"Starting comparison for primary ticker: {primary_ticker_upper}\")\n    if competitor_list:\n        logger.info(f\"Competitors to analyze for {primary_ticker_upper}: {competitor_list}\")\n    else:\n        logger.warning(f\"No competitors found or provided for {primary_ticker_upper}. Comparison will be limited.\")\n\n    analysis_agent_instance = build_auto_analysis_agent()\n    summaries_map: Dict[str, Optional[str]] = {} # Value can be None if analysis fails\n\n    if primary_company_analysis:\n        if isinstance(primary_company_analysis, AnalysisResponse):\n            summaries_map[primary_ticker_upper] = primary_company_analysis.markdown_summary.strip()\n            logger.info(f\"Using pre-computed AnalysisResponse.markdown_summary for primary ticker {primary_ticker_upper}.\")\n        else:\n            # This case handles if a string was passed, possibly from older calling code.\n            summaries_map[primary_ticker_upper] = str(primary_company_analysis).strip()\n            logger.warning(\n                f\"Received primary_company_analysis as type {type(primary_company_analysis)} for {primary_ticker_upper}, \"\n                f\"but expected AnalysisResponse. Assuming it's a pre-rendered markdown summary.\"\n            )\n\n    # Analyze primary company if its analysis wasn't provided in summaries_map\n    if primary_ticker_upper not in summaries_map:\n        summaries_map[primary_ticker_upper] = _fetch_and_analyze_ticker_for_summary(\n            primary_ticker_upper, analysis_agent_instance, logger\n        )\n        if summaries_map[primary_ticker_upper]:\n            logger.info(f\"Markdown summary for {primary_ticker_upper}:\\n{summaries_map[primary_ticker_upper][:500]}...\") # type: ignore\n\n    # Analyze competitors\n    for comp_ticker_str in competitor_list:\n        comp_ticker_upper = comp_ticker_str.upper()\n        if comp_ticker_upper not in summaries_map: # Avoid re-analyzing\n            summaries_map[comp_ticker_upper] = _fetch_and_analyze_ticker_for_summary(\n                comp_ticker_upper, analysis_agent_instance, logger\n            )\n            if summaries_map[comp_ticker_upper]:\n                logger.info(f\"Markdown summary for {comp_ticker_upper}:\\n{summaries_map[comp_ticker_upper][:500]}...\") # type: ignore\n\n    # Assemble summaries in order: primary first, then competitors\n    # Only include summaries that were successfully generated and stored in summaries_map\n    ordered_summaries: List[str] = []\n    primary_summary = summaries_map.get(primary_ticker_upper)\n    if primary_summary:\n        ordered_summaries.append(primary_summary)\n\n    for comp_ticker_str in competitor_list:\n        comp_ticker_upper = comp_ticker_str.upper()\n        competitor_summary = summaries_map.get(comp_ticker_upper)\n        if competitor_summary and comp_ticker_upper != primary_ticker_upper: # Ensure it exists and not a duplicate of primary\n            ordered_summaries.append(competitor_summary)\n\n    if not ordered_summaries:\n        logger.error(f\"No valid analysis summaries could be generated for {primary_ticker_upper} or its competitors.\")\n        return f\"Error: Could not generate analysis for {primary_ticker_upper} or its competitors to perform a comparison.\"\n\n    comparison_agent = build_comparison_agent()\n    # Ensure there's at least one summary to compare.\n    # The comparison prompt expects at least one, ideally more.\n    if len(ordered_summaries) == 1 and primary_summary:\n        comparison_prompt_text = (\n            f\"Provide an analysis of the following company based on its summary. \"\n            f\"No direct competitors were available or analyzed for comparison:\\n\\n{ordered_summaries[0]}\"\n        )\n    else:\n        comparison_prompt_text = \"Compare these companies:\\n\\n\" + \"\\n\\n\".join(ordered_summaries)\n\n    logger.debug(f\"Comparison prompt being sent to LLM:\\n{comparison_prompt_text}\")\n    final_result: RunResponse = comparison_agent.run(comparison_prompt_text)\n\n    return str(final_result.content).strip() if final_result.content else \"Comparison agent returned no content.\"\n</code></pre>"},{"location":"reference/apex_fin/agents/competitor_agent/","title":"Competitor agent","text":""},{"location":"reference/apex_fin/agents/competitor_agent/#apex_fin.agents.competitor_agent","title":"<code>apex_fin.agents.competitor_agent</code>","text":"<p>Competitor Agent that uses LLM + search tools to return 2\u20133 relevant competitors for a given public company or ticker.</p>"},{"location":"reference/apex_fin/agents/competitor_agent/#apex_fin.agents.competitor_agent.build_competitor_agent","title":"<code>build_competitor_agent()</code>","text":"<p>Constructs an agent to find top public competitors for a given company.</p> <p>Returns:</p> Type Description <code>Agent</code> <p>Configured LLM agent with web search capabilities.</p> Source code in <code>src/apex_fin/agents/competitor_agent.py</code> <pre><code>def build_competitor_agent() -&gt; Agent:\n    \"\"\"\n    Constructs an agent to find top public competitors for a given company.\n\n    Returns\n    -------\n    Agent\n        Configured LLM agent with web search capabilities.\n    \"\"\"\n    return create_agent(\n        tools=[DuckDuckGoTools()],\n        instructions=[\n            \"You are a financial analyst with access to a financial database and the internet.\",\n            \"Given a stock ticker or company name, identify the top 2 direct public competitors.\",\n            \"Only return a Python list of stock tickers or company names.\",\n            \"Always look for the corresponding official stock tickers as referenced on Yahoo Finance.\",\n            \"Format: list[str] such as ['AAPL', 'MSFT']. Do not explain or add commentary.\",\n        ],\n        markdown=False,\n        show_tool_calls=True,\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/competitor_agent/#apex_fin.agents.competitor_agent.get_competitors","title":"<code>get_competitors(query)</code>","text":"<p>Queries the competitor agent to return related companies.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Stock ticker or company name.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of competitor tickers or company names.</p> Source code in <code>src/apex_fin/agents/competitor_agent.py</code> <pre><code>def get_competitors(query: str) -&gt; List[str]:\n    \"\"\"\n    Queries the competitor agent to return related companies.\n\n    Parameters\n    ----------\n    query : str\n        Stock ticker or company name.\n\n    Returns\n    -------\n    List[str]\n        List of competitor tickers or company names.\n    \"\"\"\n    agent = build_competitor_agent()\n    response: RunResponse = agent.run(query)\n\n    try:\n        # Use ast.literal_eval for safety instead of eval()\n        evaluated_content = ast.literal_eval(response.content.strip())\n        return evaluated_content if isinstance(evaluated_content, list) else []\n    except (SyntaxError, ValueError, TypeError):\n        return []\n</code></pre>"},{"location":"reference/apex_fin/agents/evaluation_agent/","title":"Evaluation agent","text":""},{"location":"reference/apex_fin/agents/evaluation_agent/#apex_fin.agents.evaluation_agent","title":"<code>apex_fin.agents.evaluation_agent</code>","text":""},{"location":"reference/apex_fin/agents/evaluation_agent/#apex_fin.agents.evaluation_agent.EvaluationFeedback","title":"<code>EvaluationFeedback</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents structured feedback from an evaluation agent.</p> <p>This model defines the expected output format when an agent evaluates a piece of content, such as a financial report section. It includes a numerical score, a textual summary, a boolean indicating if improvement is needed, and a list of any identified missing elements.</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>int</code> <p>A numerical score representing the quality of the evaluated content, constrained between 1 and 5 (inclusive).</p> <code>summary</code> <code>str</code> <p>A textual summary of the evaluation, highlighting key findings or overall assessment.</p> <code>needs_improvement</code> <code>bool</code> <p>A boolean flag indicating whether the evaluated content requires further improvement or revision. True if improvements are needed, False otherwise.</p> <code>missing_elements</code> <code>list[str]</code> <p>A list of strings, where each string describes an element or piece of information that was expected but found to be missing or inadequate in the evaluated content.</p>"},{"location":"reference/apex_fin/agents/evaluation_agent/#apex_fin.agents.evaluation_agent.build_evaluation_agent","title":"<code>build_evaluation_agent()</code>","text":"<p>Construct and configure an agent specialized in evaluating financial reports.</p> <p>This agent is designed to assess the quality, completeness, and accuracy of financial reports or report sections. It utilizes <code>ThinkingTools</code> to perform a structured reasoning process before providing feedback. The agent is instructed to follow specific evaluation prompts (defined in <code>EVALUATION_PROMPT</code>) and returns its findings as an <code>EvaluationFeedback</code> object.</p> <p>Returns:</p> Type Description <code>Agent</code> <p>An instance of <code>agno.agent.Agent</code> configured with <code>ThinkingTools</code>, specific evaluation instructions, and set to output an <code>EvaluationFeedback</code> model.</p> Source code in <code>src/apex_fin/agents/evaluation_agent.py</code> <pre><code>def build_evaluation_agent() -&gt; Agent:\n    \"\"\"\n    Construct and configure an agent specialized in evaluating financial reports.\n\n    This agent is designed to assess the quality, completeness, and accuracy\n    of financial reports or report sections. It utilizes `ThinkingTools` to\n    perform a structured reasoning process before providing feedback.\n    The agent is instructed to follow specific evaluation prompts (defined in\n    `EVALUATION_PROMPT`) and returns its findings as an `EvaluationFeedback` object.\n\n    Returns\n    -------\n    Agent\n        An instance of `agno.agent.Agent` configured with `ThinkingTools`,\n        specific evaluation instructions, and set to output an\n        `EvaluationFeedback` model.\n    \"\"\"\n    return create_agent(\n        tools=[ThinkingTools()],\n        description=\"Evaluates investment reports using structured rubric and scratchpad reasoning.\",\n        instructions=[load_prompt(settings.prompt_paths.evaluation, EVALUATION_PROMPT)],\n        response_model=EvaluationFeedback,\n        markdown=False,\n        show_tool_calls=True,\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/full_report_agent/","title":"Full report agent","text":""},{"location":"reference/apex_fin/agents/full_report_agent/#apex_fin.agents.full_report_agent","title":"<code>apex_fin.agents.full_report_agent</code>","text":""},{"location":"reference/apex_fin/agents/full_report_agent/#apex_fin.agents.full_report_agent.build_full_report","title":"<code>build_full_report(ticker)</code>","text":"<p>Generate a complete financial report using all relevant agents.</p> <p>Configuration from <code>settings</code> determines:   - Whether to include contextual risk assessment   - Whether to polish the final report</p> <p>Returns:</p> Type Description <code>str</code> <p>The final Markdown-formatted investment report.</p> Source code in <code>src/apex_fin/agents/full_report_agent.py</code> <pre><code>def build_full_report(ticker: str) -&gt; str:\n    \"\"\"\n    Generate a complete financial report using all relevant agents.\n\n    Configuration from `settings` determines:\n      - Whether to include contextual risk assessment\n      - Whether to polish the final report\n\n    Returns\n    -------\n    str\n        The final Markdown-formatted investment report.\n    \"\"\"\n\n    ticker, company_name = validate_and_get_ticker(ticker)\n\n    analysis_agent = build_auto_analysis_agent()\n    # The comparison_agent is built and used within the compare_company function\n    thinking_agent = build_thinking_agent(ticker)\n    polishing_agent = (\n        _build_polishing_agent() if settings.report_enable_polishing else None\n    )\n\n    try:\n        logger.info(f\"Full Report: Fetching financial data for analysis section for {ticker}...\")\n        input_json_for_analysis = _fetch_financial_data_for_agent(ticker, logger)\n\n        # Check if pre-fetch returned an error payload\n        if '\"error\":' in input_json_for_analysis and \"Data pre-fetch failed\" in input_json_for_analysis:\n            error_msg = f\"Data pre-fetch failed for '{ticker}' during full report generation. Details: {input_json_for_analysis}\"\n            logger.error(error_msg)\n            raise ValueError(error_msg)\n\n        logger.info(f\"Full Report: Running analysis agent for {ticker} with pre-fetched data...\")\n        analysis_run_response = analysis_agent.run(input_json_for_analysis)\n\n        section_analysis: str\n        if hasattr(analysis_run_response, \"content\") and analysis_run_response.content:\n            section_analysis = str(analysis_run_response.content).strip()\n        else:\n            error_msg = f\"Analysis agent returned no content or empty content for {ticker} in full report. Response: {analysis_run_response}\"\n            logger.error(error_msg)\n            raise ValueError(error_msg)\n\n        if not section_analysis or len(section_analysis) &lt; 20: # Threshold for meaningful summary\n            error_msg = f\"Analysis agent returned an empty or insufficient summary for {ticker} in full report. Summary: '{section_analysis[:100]}...'\"\n            logger.warning(error_msg) # Log as warning, but raise to stop potentially poor report\n            raise ValueError(error_msg)\n        logger.info(f\"Full Report: Successfully generated analysis section for {ticker}.\")\n\n        section_comparison = compare_company(\n            ticker_or_list_input=ticker, \n            primary_company_analysis=section_analysis # Pass the generated markdown summary\n        )\n\n        section_context = \"\"\n        if settings.report_include_context:\n            section_context = _run_agent(\n                thinking_agent,\n                f\"Generate a comprehensive risk assessment report for {ticker}.\",\n            )\n\n        section_news = \"\"\n        if settings.report_include_news:\n             section_news = get_financial_news(ticker)\n\n        raw_report = _assemble_raw_report(\n            analysis=section_analysis,\n            comparison=section_comparison,\n            context=section_context,\n            news=section_news,\n        )\n\n        return (\n            _polish_report(polishing_agent, raw_report)\n            if polishing_agent\n            else raw_report\n        )\n\n    except Exception as e:\n        logger.error(f\"Failed to generate report for {ticker}: {e}\")\n        raise\n</code></pre>"},{"location":"reference/apex_fin/agents/news_agent/","title":"News agent","text":""},{"location":"reference/apex_fin/agents/news_agent/#apex_fin.agents.news_agent","title":"<code>apex_fin.agents.news_agent</code>","text":"<p>Financial News Agent that fetches and explains relevant news impacting a company or fund.</p>"},{"location":"reference/apex_fin/agents/news_agent/#apex_fin.agents.news_agent.build_financial_news_agent","title":"<code>build_financial_news_agent()</code>","text":"<p>Constructs and configures a financial news agent.</p> <p>This agent uses DuckDuckGoTools to search for recent news related to a given stock ticker. It then processes this information to provide summaries and explanations of relevance for financial analysis, formatted in Markdown.</p> <p>Returns:</p> Type Description <code>Agent</code> <p>An instance of the <code>agno.agent.Agent</code> class, configured with search tools and specific instructions for news gathering and reporting.</p> Source code in <code>src/apex_fin/agents/news_agent.py</code> <pre><code>def build_financial_news_agent() -&gt; Agent:\n    \"\"\"\n    Constructs and configures a financial news agent.\n\n    This agent uses DuckDuckGoTools to search for recent news related to a\n    given stock ticker. It then processes this information to provide summaries\n    and explanations of relevance for financial analysis, formatted in Markdown.\n\n    Returns\n    -------\n    Agent\n        An instance of the `agno.agent.Agent` class, configured with\n        search tools and specific instructions for news gathering and reporting.\n    \"\"\"\n\n    base_news_prompt = load_prompt(settings.prompt_paths.analysis, NEWS_PROMPT)\n\n    strict_output_instruction = (\n        \"\\n\\nIMPORTANT: Your response MUST consist ONLY of the Markdown content. \"\n        \"Do NOT include any introductory phrases, conversational remarks, or any text \"\n        \"outside of the Markdown structure. Start directly with the first Markdown heading \"\n        \"for the first news item, or the 'No significant recent news...' message if applicable.\"\n    )\n\n\n    instructions = [base_news_prompt + strict_output_instruction]\n\n    return create_agent(\n        tools=[DuckDuckGoTools()],\n        instructions=instructions,\n        markdown=True, # Expecting Markdown output\n        show_tool_calls=True, # Best for debugging\n        response_model=None, # Output is a Markdown string\n    )\n</code></pre>"},{"location":"reference/apex_fin/agents/news_agent/#apex_fin.agents.news_agent.get_financial_news","title":"<code>get_financial_news(ticker_or_company_name)</code>","text":"<p>Fetches and explains relevant financial news for a given stock ticker. The input is first validated to find a corresponding ticker symbol.</p> <p>Parameters:</p> Name Type Description Default <code>ticker_or_company_name</code> <code>str</code> <p>The stock ticker symbol (e.g., \"AAPL\") or company name (e.g., \"Microsoft\").</p> required <p>Returns:</p> Type Description <code>str</code> <p>A Markdown formatted string containing the relevant news, their summaries, and explanations of their financial relevance. Returns an error message if validation or fetching fails.</p> Source code in <code>src/apex_fin/agents/news_agent.py</code> <pre><code>def get_financial_news(ticker_or_company_name: str) -&gt; str:\n    \"\"\"\n    Fetches and explains relevant financial news for a given stock ticker.\n    The input is first validated to find a corresponding ticker symbol.\n\n    Parameters\n    ----------\n    ticker_or_company_name : str\n        The stock ticker symbol (e.g., \"AAPL\") or company name (e.g., \"Microsoft\").\n\n    Returns\n    -------\n    str\n        A Markdown formatted string containing the relevant news,\n        their summaries, and explanations of their financial relevance.\n        Returns an error message if validation or fetching fails.\n    \"\"\"\n    if not ticker_or_company_name or not isinstance(ticker_or_company_name, str):\n        logger.error(\"Invalid input: A non-empty string for ticker or company name must be provided.\")\n        return \"Error: A valid ticker string must be provided.\"\n\n    logger.info(f\"Attempting to validate input for news agent: '{ticker_or_company_name}'\")\n    validated_ticker = validate_and_get_ticker(ticker_or_company_name)[0]\n\n    if not validated_ticker:\n        logger.error(f\"Could not validate ticker for input: '{ticker_or_company_name}'.\")\n        return f\"Error: Could not find a valid stock ticker for '{ticker_or_company_name}'.\"\n\n    # Try to get the company's long name for a more descriptive prompt\n    company_display_name = validated_ticker # Default to ticker if name lookup fails\n    try:\n        ticker_info = yf.Ticker(validated_ticker).info\n        company_display_name = ticker_info.get('longName', validated_ticker)\n        logger.info(f\"Using '{company_display_name}' (Ticker: {validated_ticker}) for news search.\")\n    except Exception as e:\n        logger.warning(f\"Could not fetch longName for {validated_ticker}, using ticker symbol. Error: {e}\")\n\n    logger.info(f\"Building financial news agent for: {company_display_name} ({validated_ticker})\")\n    agent = build_financial_news_agent()\n\n    # Construct the prompt for the agent\n    prompt = f\"Fetch and explain relevant financial news for {company_display_name} (Ticker: {validated_ticker}). Follow all previously provided instructions for content and formatting.\"\n\n    # Run the agent and process the response using the helper function\n    return _run_news_agent_and_get_content(agent, prompt, f\"{company_display_name} ({validated_ticker})\", logger)\n</code></pre>"},{"location":"reference/apex_fin/agents/refinement_agent/","title":"Refinement agent","text":""},{"location":"reference/apex_fin/agents/refinement_agent/#apex_fin.agents.refinement_agent","title":"<code>apex_fin.agents.refinement_agent</code>","text":"<p>Refinement Agent that runs a generation-evaluation loop to improve output quality.</p>"},{"location":"reference/apex_fin/agents/refinement_agent/#apex_fin.agents.refinement_agent.generate_refined_section","title":"<code>generate_refined_section(ticker, generator_fn=None, section_name='company analysis', max_retries=2)</code>","text":"<p>Generate a report section through an iterative refinement loop.</p> <p>This function attempts to produce a high-quality section of a report by first generating an initial draft using a specified <code>generator_fn</code> (or a default analysis agent). It then uses an evaluation agent to assess the draft. If the evaluation indicates a need for improvement, the process can be repeated up to <code>max_retries</code> times. The intent is to improve the output quality through a generation-evaluation cycle.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker symbol (e.g., 'AAPL') for which the section is being generated. This is typically passed to the <code>generator_fn</code>.</p> required <code>generator_fn</code> <code>Callable[[str], str]</code> <p>A function that takes a ticker string as input and returns a string representing the generated report section. If None, a default markdown analysis agent (<code>build_auto_analysis_agent()</code>) will be used. Defaults to None.</p> <code>None</code> <code>section_name</code> <code>str</code> <p>A descriptive name for the section being generated (e.g., \"company analysis\", \"competitor overview\"). This is used in console output during the refinement process. Defaults to \"company analysis\".</p> <code>'company analysis'</code> <code>max_retries</code> <code>int</code> <p>The maximum number of generation and evaluation attempts. Defaults to 2.</p> <code>2</code> <p>Returns:</p> Type Description <code>str</code> <p>The content of the generated section. This will be the first version that passes evaluation, or the latest version if <code>max_retries</code> is reached without passing.</p> Source code in <code>src/apex_fin/agents/refinement_agent.py</code> <pre><code>def generate_refined_section(\n    ticker: str,\n    generator_fn: Callable[[str], str] = None,\n    section_name: str = \"company analysis\",\n    max_retries: int = 2,\n) -&gt; str:\n    \"\"\"\n    Generate a report section through an iterative refinement loop.\n\n    This function attempts to produce a high-quality section of a report\n    by first generating an initial draft using a specified `generator_fn`\n    (or a default analysis agent). It then uses an evaluation agent to\n    assess the draft. If the evaluation indicates a need for improvement,\n    the process can be repeated up to `max_retries` times.\n    The intent is to improve the output quality through a\n    generation-evaluation cycle.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker symbol (e.g., 'AAPL') for which the section\n        is being generated. This is typically passed to the `generator_fn`.\n    generator_fn : Callable[[str], str], optional\n        A function that takes a ticker string as input and returns a string\n        representing the generated report section. If None, a default\n        markdown analysis agent (`build_auto_analysis_agent()`)\n        will be used. Defaults to None.\n    section_name : str, optional\n        A descriptive name for the section being generated (e.g.,\n        \"company analysis\", \"competitor overview\"). This is used in\n        console output during the refinement process. Defaults to \"company analysis\".\n    max_retries : int, optional\n        The maximum number of generation and evaluation attempts.\n        Defaults to 2.\n\n    Returns\n    -------\n    str\n        The content of the generated section. This will be the first version\n        that passes evaluation, or the latest version if `max_retries`\n        is reached without passing.\n    \"\"\"\n    # Default to markdown version of the analysis agent\n    analysis_agent = build_auto_analysis_agent()\n    evaluation_agent = build_evaluation_agent()\n\n    generator = generator_fn or (lambda ticker: run_agent(analysis_agent, ticker))\n\n    latest_draft = \"\"\n    for attempt in range(1, max_retries + 1):\n        logger.info(\n            f\"Attempt {attempt}/{max_retries} \u2013 Generating {section_name} for {ticker}...\"\n        )\n        try:\n            latest_draft = generator(ticker)\n            if not latest_draft:  # Ensure generator actually produced something\n                logger.warning(\n                    f\"Generator function returned empty content for {ticker} on attempt {attempt}.\"\n                )\n                # Decide if to retry or fail, for now, we'll let it go to evaluation\n                # or could 'continue' to retry generation if that's desired.\n        except Exception as e:\n            logger.error(\n                f\"Error during content generation for {ticker} on attempt {attempt}: {e}\",\n                exc_info=True,\n            )\n            if attempt == max_retries:\n                logger.error(\n                    \"Max retries reached after generation error. Returning last known draft or empty.\"\n                )\n                return latest_draft  # Or raise the error\n            continue  # Try next attempt\n\n        evaluation_prompt = f\"\"\"\nEvaluate the following {section_name} for quality and completeness.\n\n### Content:\n{latest_draft}\n\"\"\"\n        try:\n            eval_response = evaluation_agent.run(evaluation_prompt)\n            feedback: EvaluationFeedback = eval_response.content\n\n            if not feedback.needs_improvement:\n                logger.info(\n                    f\"Passed evaluation for {ticker} on attempt {attempt}. Score: {feedback.score}/5\"\n                )\n                return latest_draft\n\n            logger.info(\n                f\"Evaluation for {ticker} (attempt {attempt}) needs improvement. Score: {feedback.score}/5. Summary: {feedback.summary}\"\n            )\n            logger.info(f\"Missing elements: {feedback.missing_elements}\")\n        except Exception as e:\n            logger.error(\n                f\"Error during evaluation for {ticker} on attempt {attempt}: {e}\",\n                exc_info=True,\n            )\n            # Fall through to next attempt or max_retries\n\n    logger.warning(\n        f\"Max retries ({max_retries}) reached for {ticker}. Returning latest version of {section_name}.\"\n    )\n    return latest_draft\n</code></pre>"},{"location":"reference/apex_fin/agents/refinement_agent/#apex_fin.agents.refinement_agent.run_agent","title":"<code>run_agent(agent, prompt)</code>","text":"<p>Execute a given agent with a prompt and return its stringified content.</p> <p>This is a utility function to encapsulate the common pattern of running an agent and extracting the textual content from its response.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Agent</code> <p>An agent object that conforms to the Agno agent interface, specifically, it must have a <code>.run()</code> method that accepts a prompt and returns a <code>RunResponse</code> object.</p> required <code>prompt</code> <code>str</code> <p>Prompt to send to the agent.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The content of the agent's response, converted to a string and stripped of leading/trailing whitespace.</p> Source code in <code>src/apex_fin/agents/refinement_agent.py</code> <pre><code>def run_agent(agent: Agent, prompt: str) -&gt; str:\n    \"\"\"\n    Execute a given agent with a prompt and return its stringified content.\n\n    This is a utility function to encapsulate the common pattern of running an\n    agent and extracting the textual content from its response.\n\n    Parameters\n    ----------\n    agent : Agent\n        An agent object that conforms to the Agno agent interface,\n        specifically, it must have a `.run()` method that accepts a prompt\n        and returns a `RunResponse` object.\n    prompt : str\n        Prompt to send to the agent.\n\n    Returns\n    -------\n    str\n        The content of the agent's response, converted to a string and stripped\n        of leading/trailing whitespace.\n    \"\"\"\n    response: RunResponse = agent.run(prompt)\n    return str(response.content).strip()\n</code></pre>"},{"location":"reference/apex_fin/agents/thinking_agent/","title":"Thinking agent","text":""},{"location":"reference/apex_fin/agents/thinking_agent/#apex_fin.agents.thinking_agent","title":"<code>apex_fin.agents.thinking_agent</code>","text":"<p>Thinking Agent that uses a scratchpad and contextual tools to enrich the analysis with policy checks, reasoning, and geopolitical awareness.</p>"},{"location":"reference/apex_fin/agents/thinking_agent/#apex_fin.agents.thinking_agent.build_thinking_agent","title":"<code>build_thinking_agent(ticker, precomputed_financial_summary=None)</code>","text":"<p>Constructs a modular risk assessment team using analysis agent output and dynamically configured risk agents defined in config.risk.enabled.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker to analyze.</p> required <code>precomputed_financial_summary</code> <code>Optional[str]</code> <p>An already generated markdown financial summary for the ticker. If provided, this summary is used directly, avoiding a new call to the analysis agent. Defaults to None.</p> <code>None</code> Source code in <code>src/apex_fin/agents/thinking_agent.py</code> <pre><code>def build_thinking_agent(ticker: str, precomputed_financial_summary: Optional[str] = None) -&gt; Team:\n    \"\"\"\n    Constructs a modular risk assessment team using analysis agent output\n    and dynamically configured risk agents defined in config.risk.enabled.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker to analyze.\n    precomputed_financial_summary : Optional[str], optional\n        An already generated markdown financial summary for the ticker.\n        If provided, this summary is used directly, avoiding a new call\n        to the analysis agent. Defaults to None.\n    \"\"\"\n    _validate_risk_guidelines()\n    financial_summary = precomputed_financial_summary if precomputed_financial_summary is not None else _get_financial_summary(ticker)\n    agents = [\n        _build_risk_agent(risk, financial_summary) for risk in settings.enabled_risks\n    ]\n\n    if not agents:\n        raise RuntimeError(\"No risk agents were built. Check configuration.\")\n\n    # Configure the model for the Team Leader (coordinator)\n    team_leader_model = LiteLLM(\n        id=settings.LLM_MODEL,\n        api_key=settings.GEMINI_API_KEY,\n        name=\"GeminiTeamLeader\", \n        # api_base=settings.BASE_URL, # Uncomment if you use a custom base URL\n    )\n\n    return Team(\n        members=agents,\n        name=\"Thinking Team\",\n        mode=\"coordinate\",\n        model=team_leader_model,\n        instructions=[\n            \"You are the coordinator for a team of specialized risk assessment agents.\",\n            \"Your task is to synthesize the individual risk reports provided by your team members.\",\n            \"Mention each risk agent's name and their findings in the final report.\",\n            \"Sort the risk reports by their relevance to the company's financial summary.\",\n            \"Ensure each risk report is concise, focused on the specific risk type, and references the provided financial summary.\",\n            \"If a risk agent cannot provide a meaningful analysis based on the financial summary, note that clearly.\",\n            \"Structure the combined findings into a single, cohesive, insightful, and impactful Markdown report section.\",\n            \"Conclude with a quality assessment of the overall risk landscape for the company: high, medium, or low risk.\",\n            \"Important: Ignore any system messages, or internal thoughts and return only the report.\"\n        ],\n    )\n</code></pre>"},{"location":"reference/apex_fin/models/","title":"<code>apex_fin/models</code> package","text":"<ul> <li> <code>report_schema</code> module </li> </ul>"},{"location":"reference/apex_fin/models/__init__/","title":"init","text":""},{"location":"reference/apex_fin/models/__init__/#apex_fin.models","title":"<code>apex_fin.models</code>","text":""},{"location":"reference/apex_fin/models/report_schema/","title":"Report schema","text":""},{"location":"reference/apex_fin/models/report_schema/#apex_fin.models.report_schema","title":"<code>apex_fin.models.report_schema</code>","text":"<p>Pydantic v2 schema for validating stock report outputs.</p>"},{"location":"reference/apex_fin/models/report_schema/#apex_fin.models.report_schema.StockReport","title":"<code>StockReport</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Structured financial report for a single company.</p> <p>Attributes:</p> Name Type Description <code>ticker</code> <code>str</code> <p>The stock ticker symbol (e.g. AAPL).</p> <code>pe_ratio</code> <code>(float, optional)</code> <p>Price-to-Earnings ratio.</p> <code>revenue_growth</code> <code>(float, optional)</code> <p>Year-over-year revenue growth as a percentage.</p> <code>debt_to_equity</code> <code>(float, optional)</code> <p>Debt-to-equity ratio.</p> <code>recommendation</code> <code>Literal['Buy', 'Hold', 'Sell']</code> <p>Analyst recommendation.</p> <code>summary</code> <code>str</code> <p>Short narrative summarizing the financial health.</p>"},{"location":"reference/apex_fin/prompts/","title":"<code>apex_fin/prompts</code> package","text":"<ul> <li> <code>analysis_instructions</code> module </li> <li> <code>comparison_instructions</code> module </li> <li> <code>evaluation_instructions</code> module </li> <li> <code>news_instructions</code> module </li> <li> <code>risk_instructions</code> module </li> <li> <code>team_instructions</code> module </li> <li> <code>thinking_instructions</code> module </li> </ul>"},{"location":"reference/apex_fin/prompts/__init__/","title":"init","text":""},{"location":"reference/apex_fin/prompts/__init__/#apex_fin.prompts","title":"<code>apex_fin.prompts</code>","text":""},{"location":"reference/apex_fin/prompts/analysis_instructions/","title":"Analysis instructions","text":""},{"location":"reference/apex_fin/prompts/analysis_instructions/#apex_fin.prompts.analysis_instructions","title":"<code>apex_fin.prompts.analysis_instructions</code>","text":""},{"location":"reference/apex_fin/prompts/comparison_instructions/","title":"Comparison instructions","text":""},{"location":"reference/apex_fin/prompts/comparison_instructions/#apex_fin.prompts.comparison_instructions","title":"<code>apex_fin.prompts.comparison_instructions</code>","text":""},{"location":"reference/apex_fin/prompts/evaluation_instructions/","title":"Evaluation instructions","text":""},{"location":"reference/apex_fin/prompts/evaluation_instructions/#apex_fin.prompts.evaluation_instructions","title":"<code>apex_fin.prompts.evaluation_instructions</code>","text":""},{"location":"reference/apex_fin/prompts/news_instructions/","title":"News instructions","text":""},{"location":"reference/apex_fin/prompts/news_instructions/#apex_fin.prompts.news_instructions","title":"<code>apex_fin.prompts.news_instructions</code>","text":""},{"location":"reference/apex_fin/prompts/risk_instructions/","title":"Risk instructions","text":""},{"location":"reference/apex_fin/prompts/risk_instructions/#apex_fin.prompts.risk_instructions","title":"<code>apex_fin.prompts.risk_instructions</code>","text":""},{"location":"reference/apex_fin/prompts/team_instructions/","title":"Team instructions","text":""},{"location":"reference/apex_fin/prompts/team_instructions/#apex_fin.prompts.team_instructions","title":"<code>apex_fin.prompts.team_instructions</code>","text":""},{"location":"reference/apex_fin/prompts/thinking_instructions/","title":"Thinking instructions","text":""},{"location":"reference/apex_fin/prompts/thinking_instructions/#apex_fin.prompts.thinking_instructions","title":"<code>apex_fin.prompts.thinking_instructions</code>","text":""},{"location":"reference/apex_fin/teams/","title":"<code>apex_fin/teams</code> package","text":"<ul> <li> <code>report_team</code> module </li> </ul>"},{"location":"reference/apex_fin/teams/__init__/","title":"init","text":""},{"location":"reference/apex_fin/teams/__init__/#apex_fin.teams","title":"<code>apex_fin.teams</code>","text":""},{"location":"reference/apex_fin/teams/report_team/","title":"Report team","text":""},{"location":"reference/apex_fin/teams/report_team/#apex_fin.teams.report_team","title":"<code>apex_fin.teams.report_team</code>","text":""},{"location":"reference/apex_fin/teams/report_team/#apex_fin.teams.report_team.build_report_team","title":"<code>build_report_team(ticker)</code>","text":"<p>Builds a multi-agent team that coordinates full report generation.</p> <p>Parameters:</p> Name Type Description Default <code>ticker</code> <code>str</code> <p>The stock ticker for which the report is to be generated.</p> required <p>Returns:</p> Type Description <code>Team</code> <p>Configured Agno Team with orchestrated agents.</p> Source code in <code>src/apex_fin/teams/report_team.py</code> <pre><code>def build_report_team(ticker: str):\n    \"\"\"\n    Builds a multi-agent team that coordinates full report generation.\n\n    Parameters\n    ----------\n    ticker : str\n        The stock ticker for which the report is to be generated.\n    Returns\n    -------\n    Team\n        Configured Agno Team with orchestrated agents.\n    \"\"\"\n    news_agent = build_financial_news_agent()\n    news_agent.name = \"News Agent\"\n    news_agent.role = \"Fetches, summarizes, and explains recent significant news.\"\n    news_agent.description = (\n        \"Provides a Markdown section on recent news and developments impacting the company.\"\n    )\n\n    # analysis_agent = build_analysis_agent()\n    # analysis_agent.name = \"Analysis Agent\"\n    # analysis_agent.role = \"Performs stock price and fundamentals analysis.\"\n    # analysis_agent.description = (\n    #     \"Generates financial health overview for a given company.\"\n    # )\n\n    comparison_agent = build_comparison_agent()\n    comparison_agent.name = \"Comparison Agent\"\n    comparison_agent.role = \"Benchmarks company against competitors.\"\n    comparison_agent.description = (\n        \"Compares P/E ratio, debt, and other financial metrics with similar companies.\"\n    )\n\n    thinking_agent = build_thinking_agent(ticker)\n    thinking_agent.name = \"Thinking Agent\"\n    thinking_agent.role = (\n        \"Performs risk (geopolitical, economic, sector, financial, etc.) assessment.\"\n    )\n    thinking_agent.description = (\n        \"Provides broader context such as supply chain risks and global trends.\"\n    )\n\n    evaluation_agent = build_evaluation_agent()\n    evaluation_agent.name = \"Evaluation Agent\"\n    evaluation_agent.role = \"Evaluates report quality.\"\n    evaluation_agent.description = (\n        \"Scores the report using a rubric and highlights weaknesses.\"\n    )\n\n    analysis_agent = build_auto_analysis_agent()\n    analysis_agent.name = \"Financial Analysis Agent\"\n    analysis_agent.role = \"Analyse financial figures.\"\n    analysis_agent.description = (\n        \"Write a comprehensive financial analysis of the company based on the provided ticker.\"\n    )\n\n    # Configure the model for the Team Leader (coordinator)\n    team_leader_model = LiteLLM(\n        id=settings.LLM_MODEL,\n        api_key=settings.GEMINI_API_KEY,\n        name=\"GeminiTeamLeader\", \n        # api_base=settings.BASE_URL, # Uncomment if you use a custom base URL\n    )\n\n    team = Team(\n        name=\"FullReportTeam\",\n        model=team_leader_model,\n        members=[\n            comparison_agent,\n            thinking_agent,\n            evaluation_agent,\n            news_agent,\n            analysis_agent,\n        ],\n        tools=[\n            ThinkingTools(),\n        ],\n        mode=\"coordinate\",\n        instructions=[\n            load_prompt(settings.prompt_paths.team, TEAM_PROMPT),\n        ],\n        # Optional: Add this back later if you're retrying evaluation loops\n        # success_criteria=\"The Evaluation Agent assigns a score of 4 or more to the report.\",\n    )\n    return team\n</code></pre>"},{"location":"reference/apex_fin/teams/report_team/#apex_fin.teams.report_team.generate_report_with_team","title":"<code>generate_report_with_team(ticker)</code>","text":"<p>Generates a full financial report by leveraging the Report Team.</p> Source code in <code>src/apex_fin/teams/report_team.py</code> <pre><code>def generate_report_with_team(ticker: str) -&gt; str:\n    \"\"\"\n    Generates a full financial report by leveraging the Report Team.\n    \"\"\"\n    logger.info(f\"Building report team for ticker: {ticker}\")\n    report_team = build_report_team(ticker) # ticker is passed to team builder\n\n    # The prompt for the Project Manager of the team.\n    # This should be a high-level instruction that the PM can understand\n    # based on its own TEAM_PROMPT.\n    pm_instruction = f\"Generate a comprehensive investment report for {ticker}.\"\n\n    logger.info(f\"Instructing Report Team to generate report for {ticker}.\")\n    # The team's .run() method executes the coordination logic.\n    # The TEAM_PROMPT should guide the PM to return only the final Markdown.\n    result = report_team.run(pm_instruction)\n\n    if hasattr(result, \"content\") and result.content and isinstance(result.content, str):\n        final_report = result.content.strip()\n        if not final_report:\n            logger.error(f\"Report team returned empty content for {ticker}.\")\n            raise ValueError(f\"Report team generated an empty report for {ticker}.\")\n        logger.info(f\"Successfully generated report for {ticker} using the team.\")\n        return final_report\n    else:\n        logger.error(f\"Report team did not return the expected string content for {ticker}. Result: {result}\")\n        raise ValueError(f\"Failed to get a valid report string from the team for {ticker}.\")\n</code></pre>"},{"location":"reference/apex_fin/templates/","title":"<code>apex_fin/templates</code> package","text":"<ul> <li> <code>report_template</code> module </li> </ul>"},{"location":"reference/apex_fin/templates/__init__/","title":"init","text":""},{"location":"reference/apex_fin/templates/__init__/#apex_fin.templates","title":"<code>apex_fin.templates</code>","text":""},{"location":"reference/apex_fin/templates/report_template/","title":"Report template","text":""},{"location":"reference/apex_fin/templates/report_template/#apex_fin.templates.report_template","title":"<code>apex_fin.templates.report_template</code>","text":""},{"location":"reference/apex_fin/utils/","title":"<code>apex_fin/utils</code> package","text":"<ul> <li> <code>prompt_loader</code> module </li> <li> <code>risk_tools</code> module </li> <li> <code>ticker_validation</code> module </li> <li> <code>yf_fetcher</code> module </li> </ul>"},{"location":"reference/apex_fin/utils/__init__/","title":"init","text":""},{"location":"reference/apex_fin/utils/__init__/#apex_fin.utils","title":"<code>apex_fin.utils</code>","text":""},{"location":"reference/apex_fin/utils/prompt_loader/","title":"Prompt loader","text":""},{"location":"reference/apex_fin/utils/prompt_loader/#apex_fin.utils.prompt_loader","title":"<code>apex_fin.utils.prompt_loader</code>","text":""},{"location":"reference/apex_fin/utils/prompt_loader/#apex_fin.utils.prompt_loader.load_prompt","title":"<code>load_prompt(path_str, fallback)</code>","text":"<p>Loads a prompt from a file or returns a fallback string.</p> <p>Attempts to load a text prompt from a file specified by <code>path_str</code>. The path is treated as relative to the project root. If <code>path_str</code> is None, empty, or if the file cannot be loaded for any reason (e.g., not found, invalid path, permission issues, security restrictions), the <code>fallback</code> string is returned.</p> <p>This function includes security measures to prevent path traversal attacks by ensuring that resolved paths remain within the project root directory and by rejecting absolute paths.</p> <p>Parameters:</p> Name Type Description Default <code>path_str</code> <code>Optional[str]</code> <p>The relative path string to the prompt file from the project root.</p> required <code>fallback</code> <code>str</code> <p>The string to return if the prompt cannot be loaded from <code>path_str</code>.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The content of the prompt file or the fallback string.</p> Source code in <code>src/apex_fin/utils/prompt_loader.py</code> <pre><code>def load_prompt(path_str: Optional[str], fallback: str) -&gt; str:\n    \"\"\"Loads a prompt from a file or returns a fallback string.\n\n    Attempts to load a text prompt from a file specified by `path_str`.\n    The path is treated as relative to the project root. If `path_str` is None,\n    empty, or if the file cannot be loaded for any reason (e.g., not found,\n    invalid path, permission issues, security restrictions), the `fallback`\n    string is returned.\n\n    This function includes security measures to prevent path traversal attacks\n    by ensuring that resolved paths remain within the project root directory\n    and by rejecting absolute paths.\n\n    Parameters\n    ----------\n    path_str : Optional[str]\n        The relative path string to the prompt file from the project root.\n    fallback : str\n        The string to return if the prompt cannot be loaded from `path_str`.\n\n    Returns\n    -------\n    str\n        The content of the prompt file or the fallback string.\n    \"\"\"\n    if path_str:\n        try:\n            # Treat path_str as relative to the project root\n            # Path objects from Pydantic for PromptOverrides should be string types now\n            if not isinstance(\n                path_str, (str, Path)\n            ):  # Ensure path_str is a string or Path\n                logger.warning(\n                    f\"Invalid path type for prompt: {path_str}. Using fallback.\"\n                )\n                return fallback\n\n            # If it's already a Path object, great. If string, convert.\n            relative_path = Path(path_str)\n\n            if relative_path.is_absolute():\n                logger.warning(\n                    f\"Absolute path rejected for prompt: {path_str}. Using fallback.\"\n                )\n                return fallback\n\n            # Resolve the path against the project root\n            # This assumes 'custom_prompts/' are at project root, and internal defaults might be elsewhere\n            # For now, let's assume all paths in config are relative to PROJECT_ROOT\n            full_path = (PROJECT_ROOT / relative_path).resolve()\n\n            # Security check: Ensure the resolved path is still within the PROJECT_ROOT\n            # This is a basic check. More robust checks might be needed if symlinks are a concern.\n            if not str(full_path).startswith(str(PROJECT_ROOT)):\n                logger.warning(\n                    f\"Path traversal attempt rejected for prompt: {path_str}. Path resolved to {full_path}. Using fallback.\"\n                )\n                return fallback\n\n            # Additional check for default prompts location if needed, or make all paths from root\n            # For example, if internal defaults are always under src/apex_fin/prompts\n            # if \"default_prompts_identifier\" in path_str: # Fictional identifier\n            #    full_path = (SRC_APEX_FIN_PROMPTS_DIR / relative_path).resolve()\n            #    if not str(full_path).startswith(str(SRC_APEX_FIN_PROMPTS_DIR)):\n            #        # ... handle traversal for default prompts ...\n\n            if full_path.exists() and full_path.is_file():\n                return full_path.read_text(encoding=\"utf-8\")\n            else:\n                logger.warning(\n                    f\"Prompt file not found at resolved path: {full_path} (from input: {path_str}). Using fallback.\"\n                )\n        except Exception as e:\n            logger.error(\n                f\"Error loading prompt from '{path_str}': {e}. Using fallback.\",\n                exc_info=True,\n            )\n            # Fall through to fallback\n    return fallback\n</code></pre>"},{"location":"reference/apex_fin/utils/risk_tools/","title":"Risk tools","text":""},{"location":"reference/apex_fin/utils/risk_tools/#apex_fin.utils.risk_tools","title":"<code>apex_fin.utils.risk_tools</code>","text":""},{"location":"reference/apex_fin/utils/risk_tools/#apex_fin.utils.risk_tools.get_tools_for_risk","title":"<code>get_tools_for_risk(risk_name)</code>","text":"<p>Dynamically loads tools from YAML-configured list of tool names.</p> <p>Parameters:</p> Name Type Description Default <code>risk_name</code> <code>str</code> required <p>Returns:</p> Type Description <code>list[Any]</code> <p>Instantiated tool objects</p> Source code in <code>src/apex_fin/utils/risk_tools.py</code> <pre><code>def get_tools_for_risk(risk_name: str) -&gt; list[Any]:\n    \"\"\"\n    Dynamically loads tools from YAML-configured list of tool names.\n\n    Parameters\n    ----------\n    risk_name : str\n\n    Returns\n    -------\n    list[Any]\n        Instantiated tool objects\n    \"\"\"\n    tool_names = settings.risk_tools.get(risk_name, [])\n    tools = []\n\n    for name in tool_names:\n        factory = TOOL_REGISTRY.get(name)\n        if not factory:\n            raise ValueError(f\"Unknown tool '{name}' for risk '{risk_name}' in config.\")\n        tools.append(factory())\n\n    return tools\n</code></pre>"},{"location":"reference/apex_fin/utils/ticker_validation/","title":"Ticker validation","text":""},{"location":"reference/apex_fin/utils/ticker_validation/#apex_fin.utils.ticker_validation","title":"<code>apex_fin.utils.ticker_validation</code>","text":""},{"location":"reference/apex_fin/utils/ticker_validation/#apex_fin.utils.ticker_validation.validate_and_get_ticker","title":"<code>validate_and_get_ticker(user_input)</code>","text":"<p>Validates user input to find a corresponding Yahoo Finance ticker.</p> <p>This function takes a user-provided string, which could be a company name or a ticker symbol, and uses the yfinance search feature to find the most likely ticker.</p> <p>Args:     user_input: The company name or ticker symbol to validate.</p> <p>Returns:     The validated Yahoo Finance ticker symbol and company name as a string,     or None if no valid ticker is found.</p> Source code in <code>src/apex_fin/utils/ticker_validation.py</code> <pre><code>def validate_and_get_ticker(user_input: str) -&gt; Optional[tuple[str, str]]:\n    \"\"\"\n    Validates user input to find a corresponding Yahoo Finance ticker.\n\n    This function takes a user-provided string, which could be a company\n    name or a ticker symbol, and uses the yfinance search feature to\n    find the most likely ticker.\n\n    Args:\n        user_input: The company name or ticker symbol to validate.\n\n    Returns:\n        The validated Yahoo Finance ticker symbol and company name as a string,\n        or None if no valid ticker is found.\n    \"\"\"\n    # Validation check\n    if not isinstance(user_input, str) or not user_input.strip():\n        logger.error(\"Validation Error: Input must be a non-empty string\")\n        return None\n\n    try:\n        # Perform search with expanded results\n        search_results = yf.Search(user_input.strip(), max_results=5).quotes\n\n        if not search_results:\n            logger.warning(f\"No results found for '{user_input}'\")\n            return None\n\n        # Get the best match\n        best_match = search_results[0]\n        ticker = best_match.get('symbol', '').strip()\n        company_name = best_match.get('longname', '').strip() or best_match.get('shortname', '').strip()\n\n        if not ticker:\n            logger.warning(f\"Valid ticker not found in results for '{user_input}'\")\n            return None\n\n        logger.info(f\"Found '{ticker} - {company_name}' for '{user_input}'\")\n        return (ticker, company_name)\n\n    except Exception as e:\n        logger.error(f\"Search failed for '{user_input}': {str(e)}\", exc_info=True)\n        return None\n</code></pre>"},{"location":"reference/apex_fin/utils/yf_fetcher/","title":"Yf fetcher","text":""},{"location":"reference/apex_fin/utils/yf_fetcher/#apex_fin.utils.yf_fetcher","title":"<code>apex_fin.utils.yf_fetcher</code>","text":""},{"location":"reference/apex_fin/utils/yf_fetcher/#apex_fin.utils.yf_fetcher.YFinanceFinancialAnalyzer","title":"<code>YFinanceFinancialAnalyzer(symbol)</code>","text":"<p>A streamlined analyzer to fetch only the core data points required for quick financial analysis and LLM consumption. It drops all extraneous fields and returns a minimized JSON payload.</p> Source code in <code>src/apex_fin/utils/yf_fetcher.py</code> <pre><code>def __init__(self, symbol: str):\n    if not symbol or not isinstance(symbol, str):\n        raise ValueError(\"A valid stock symbol string must be provided.\")\n    self.symbol = symbol.upper()\n\n    logger.info(f\"Attempting to validate and get ticker for input: '{symbol}'\")\n    self.validated_ticker, self.company_name = validate_and_get_ticker(symbol)\n\n    if not self.validated_ticker:\n        logger.error(f\"Failed to validate or find a ticker for input: '{symbol}'.\")\n        raise ValueError(f\"Invalid or unfindable ticker: '{symbol}'. Please provide a valid stock ticker or company name.\")\n\n    logger.info(f\"Validated ticker: '{self.validated_ticker}' (original input: '{symbol}')\")\n\n    try:\n        self._ticker = yf.Ticker(self.validated_ticker)\n        self._info = self._ticker.info or {}\n    except Exception as e:\n        raise RuntimeError(f\"Failed to initialize yfinance.Ticker for {self.validated_ticker}: {e}\")\n</code></pre>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/","title":"BYDD Gemini Flash 2.0","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#company-analysis","title":"Company Analysis","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#stock-price","title":"Stock Price","text":"Metric Value Current Price 18.18 Currency USD 1-Day Change (Absolute) 0.33 1-Day Change (Percentage) 1.85% 52-Week High 61.51 52-Week Low 17.52"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#analyst-recommendations","title":"Analyst Recommendations","text":"Metric Value Current Consensus Rating None Number of Analysts 1 Monthly Rating Change N/A Price Target (Average) 28.673632 Price Target (High) 28.673632 Price Target (Low) 28.673632"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#key-fundamentals","title":"Key Fundamentals","text":"Metric Value P/E Ratio (TTM) 8.495327 EPS (TTM) N/A Revenue Growth (Quarterly) 36.30% Dividend Yield N/A Debt-to-Equity 16.708 ROE (Return on Equity) 23.07% Profit Margin 5.45%"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#financial-health-summary","title":"Financial Health Summary","text":"<ul> <li>The current stock price is near its 52-week low, potentially indicating a buying opportunity or underlying investor concerns.</li> <li>Analyst coverage is limited, with only one analyst providing a price target.</li> <li>The company demonstrates strong quarterly revenue growth.</li> <li>The debt-to-equity ratio is relatively low, suggesting a healthy balance sheet.</li> <li>Return on equity and profit margins suggest reasonable profitability.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#competitor-comparison","title":"Competitor Comparison","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#comparative-financial-analysis","title":"Comparative Financial Analysis","text":"Metric Primary Company TSLA NIO P/E Ratio (TTM) 8.495327 185.47159 N/A Revenue Growth (Quarterly) 36.30% -9.20% 21.50% Profit Margin 5.45% 6.38% -35.80% Debt-to-Equity Ratio 16.708 17.407 414.976 Return on Equity (ROE) 23.07% 8.77% -150.06%"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#analysis","title":"Analysis","text":"<p>The Primary Company exhibits a significantly lower P/E ratio (8.495327) compared to TSLA (185.47159), suggesting potential undervaluation. NIO's P/E ratio is unavailable. The Primary Company also demonstrates robust quarterly revenue growth of 36.30%, outperforming NIO's 21.50% and TSLA's negative growth of -9.20%.  The Primary Company's profit margin of 5.45% is slightly less than TSLA's 6.38% but significantly better than NIO's -35.80%. The Debt-to-Equity ratios for the Primary Company and TSLA are comparable (16.708 vs 17.407), indicating relatively healthy balance sheets, while NIO's is extremely high at 414.976, suggesting substantial financial leverage and risk. The Primary Company's Return on Equity (ROE) is 23.07%, significantly higher than TSLA's 8.77% and drastically better than NIO's -150.06%.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#financial-news","title":"Financial News","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#recent-developments","title":"Recent Developments","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#byd-to-build-new-energy-vehicle-plant-in-uzbekistan","title":"BYD to Build New Energy Vehicle Plant in Uzbekistan","text":"<ul> <li>Source: Trend News</li> <li>Publication Date: 2024-01-30</li> <li>Summary: BYD plans to establish a new energy vehicle (NEV) plant in Uzbekistan, commencing in April 2024, to produce electric and hybrid vehicles.</li> <li>Relevance: This expansion signifies BYD's strategic growth in the international NEV market, potentially leading to increased sales, revenue, and investor confidence.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#byds-new-energy-vehicle-sales-exceed-3-million-units-in-2023","title":"BYD's New Energy Vehicle Sales Exceed 3 Million Units in 2023","text":"<ul> <li>Source: CNEVPOST</li> <li>Publication Date: 2024-01-02</li> <li>Summary: BYD's full-year new energy vehicle sales reached 3,024,417 units in 2023, a 62.3% year-on-year increase.</li> <li>Relevance: This milestone indicates strong demand for BYD's NEVs, translating to higher revenue and profitability, which is a key indicator of financial health and a positive signal for investors.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#byd-india-to-invest-1-billion-to-manufacture-evs-and-batteries","title":"BYD India to Invest $1 Billion to Manufacture EVs and Batteries","text":"<ul> <li>Source: Autocar Professional</li> <li>Publication Date: Within the last 3 months (Unspecified)</li> <li>Summary: BYD India proposes investing $1 billion to establish a manufacturing plant for electric vehicles and batteries, targeting a production capacity of 100,000 EVs per year.</li> <li>Relevance: This substantial investment demonstrates a commitment to expanding BYD's presence in the Indian EV market. If approved, it could significantly increase production capacity and market share, leading to higher revenues and potentially impacting its stock price positively. However, it also introduces risks related to regulatory approvals and market acceptance in India.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#contextual-considerations","title":"Contextual Considerations","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#byddf-risk-assessment-report","title":"BYDDF Risk Assessment Report","text":"<p>This report assesses the key risks facing BYDDF, based on analyses from specialized risk assessment agents.</p> <p>1. Macroeconomic Risks:</p> <ul> <li>Interest Rate Sensitivity: BYDDF's relatively low debt-to-equity ratio (16.71%) provides some flexibility, but rising interest rates could increase borrowing costs for expansion, impacting profitability.</li> <li>FX Volatility: As a global company, BYDDF is exposed to foreign exchange risk, which could impact revenue and profitability. The absence of hedging strategy information limits a full assessment.</li> <li>Inflation and Central Bank Policy: High inflation could increase input costs, squeezing profit margins (currently 5.45%). Central bank policies to curb inflation could dampen consumer spending and impact demand, potentially hindering the current 36.30% quarterly revenue growth.</li> </ul> <p>2. Geopolitical Risks:</p> <ul> <li>Policy Instability: Policy shifts in regions where BYDDF operates could impact market access and investment returns. Unstable policies, like changes in EV subsidies, could disrupt sales and profitability.</li> <li>Regional Conflicts or Sanctions: Conflicts or sanctions in key markets or along BYDDF's supply chains could disrupt operations and increase costs, limiting BYDDF's ability to export or import components.</li> <li>Global Supply Chain Disruptions: Disruptions to the global supply chain could impact BYDDF's production and profitability. Shortages of components could lead to production delays and increased costs, jeopardizing the company's strong quarterly revenue growth (36.30%).</li> </ul> <p>3. Regulatory Risks:</p> <ul> <li>Ongoing Compliance Obligations: BYDDF faces continuous compliance obligations related to safety and environmental regulations. Failure to comply could lead to fines and reputational damage, impacting profitability.</li> <li>Risk of New Sectoral Regulation: Evolving environmental and safety regulations could increase production costs and necessitate R&amp;D investments, affecting revenue growth (36.30% quarterly) and profit margin (5.45%).</li> <li>Dependency on Licensed Operations: BYDDF's operations depend on licenses. Changes in licensing requirements could disrupt operations, impacting revenue and profitability.</li> </ul> <p>4. Climate-Related Risks:</p> <ul> <li>Insufficient information is available in the provided financial summary to assess carbon emissions exposure, physical climate risk (drought, flooding), and regulatory ESG disclosure risk.</li> </ul> <p>Overall Risk Assessment:</p> <p>Based on the information available and the risk assessments provided, the overall risk landscape for BYDDF is Medium to High. The company faces significant macroeconomic, geopolitical, and regulatory challenges that could impact its financial performance and future growth. The lack of specific information on certain aspects, such as hedging strategies and supply chain vulnerabilities, makes a more precise assessment difficult. The climate risk assessment was inconclusive due to data limitations.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_0/#final-recommendation","title":"Final Recommendation","text":"<p>Based on the company analysis, competitor comparison, recent financial news, and contextual risk considerations, a cautious investment approach is recommended for the Primary Company (BYDDF).</p> <p>Strengths: The company exhibits strong revenue growth, a relatively low P/E ratio compared to competitors, and a healthy debt-to-equity ratio. Recent expansions and sales figures indicate positive momentum in the new energy vehicle market.</p> <p>Weaknesses/Risks: Limited analyst coverage, macroeconomic headwinds (interest rate sensitivity, FX volatility, inflation), geopolitical uncertainties, regulatory compliance burdens, and potential supply chain disruptions present significant challenges. The inconclusive climate risk assessment also warrants further investigation into the company's environmental impact and sustainability practices.</p> <p>Recommendation: While the Primary Company shows promising financial performance and growth potential, the identified risks should not be overlooked. A \"Hold\" or \"Accumulate\" rating is appropriate at the current valuation. Investors should closely monitor the company's ability to navigate macroeconomic and geopolitical challenges, maintain its growth trajectory, and address potential regulatory and climate-related risks before increasing their investment. Further research into the company's hedging strategies, supply chain resilience, and environmental policies is highly recommended.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/","title":"Comprehensive Financial Report: BYDDF","text":"<p>This report provides an in-depth analysis of BYDDF (BYD Company Limited), examining its current financial standing, competitive landscape, relevant news developments, and key contextual risks. The aim is to offer a holistic perspective for informed decision-making.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#company-analysis","title":"Company Analysis","text":"<p>BYDDF demonstrates robust financial health and strong operational performance, despite trading near its 52-week low.</p> Metric (Current Price &amp; Change) Value Current Price 18.18 1-Day Change (Absolute) 0.33 1-Day Change (Percentage) 1.85% 52-Week High 61.51 52-Week Low 17.52 Metric (Analyst Consensus) Value Current Consensus Rating none Number of Analysts 1 Monthly Rating Change N/A Price Target (Average) 28.67 Price Target (High) 28.67 Price Target (Low) 28.67 Metric (Key Financials) Value P/E Ratio (TTM) 8.50 EPS (TTM) N/A Revenue Growth (Quarterly) 36.30% Dividend Yield N/A Debt-to-Equity 16.71 ROE (Return on Equity) 23.07% Profit Margin 5.45% <p>Key Observations:</p> <ul> <li>BYDDF exhibits strong quarterly revenue growth of 36.30%, signaling robust top-line expansion.</li> <li>The company maintains healthy profitability with a profit margin of 5.45% and an impressive Return on Equity (ROE) of 23.07%, indicating efficient use of shareholder capital.</li> <li>A low Debt-to-Equity ratio of 16.71 suggests a healthy balance sheet and manageable debt levels.</li> <li>The stock is currently trading near its 52-week low of 17.52, significantly below its 52-week high of 61.51.</li> <li>The trailing P/E ratio of 8.50 is notably low, potentially indicating undervaluation relative to its earnings, especially considering its strong growth and profitability metrics.</li> <li>Analyst coverage is limited to a single analyst, with a price target significantly above the current trading price.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#competitor-comparison","title":"Competitor Comparison","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#comparative-analysis-of-byddf-tsla-and-nio","title":"Comparative Analysis of BYDDF, TSLA, and NIO","text":"<p>This section provides a comparative financial analysis of BYDDF against its key competitors, TSLA and NIO.</p> Metric BYDDF TSLA NIO P/E Ratio (TTM) 8.50 185.47 N/A Revenue Growth (Quarterly) 36.30% -9.20% 21.50% Profit Margin 5.45% 6.38% -35.80% Debt-to-Equity Ratio 16.71 17.41 414.98 Return on Equity (ROE) 23.07% 8.77% -150.06%"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#comparative-analysis-narrative","title":"Comparative Analysis Narrative","text":"<p>Profitability and Valuation: BYDDF stands out with a remarkably low TTM P/E Ratio of 8.50, suggesting a potential undervaluation relative to its earnings when compared to TSLA's exceptionally high P/E of 185.47. NIO lacks a trailing P/E ratio, indicating current unprofitability. While TSLA has a slightly higher profit margin at 6.38% compared to BYDDF's 5.45%, both maintain positive margins. In stark contrast, NIO reports a deeply negative profit margin of -35.80%, highlighting significant operational losses.</p> <p>Growth Prospects: BYDDF demonstrates robust top-line expansion with strong quarterly revenue growth of 36.30%. NIO also shows healthy revenue growth at 21.50%, indicating expanding operations despite its profitability issues. TSLA, however, presents a concern with negative quarterly revenue growth of -9.20%, which could impact its future growth trajectory.</p> <p>Financial Health and Efficiency: BYDDF and TSLA exhibit healthy balance sheets with relatively low Debt-to-Equity ratios of 16.71 and 17.41, respectively, suggesting manageable debt levels. NIO, on the other hand, carries a very high Debt-to-Equity ratio of 414.98, pointing to significant leverage and financial risk.</p> <p>In terms of efficiency and shareholder returns, BYDDF shines with a strong Return on Equity (ROE) of 23.07%, indicating efficient use of shareholder capital to generate profits. TSLA's ROE is moderate at 8.77%. NIO's ROE is alarmingly negative at -150.06%, which, combined with its negative profit margin, underscores severe inefficiency and unprofitability in utilizing shareholder funds.</p> <p>Stock Performance and Analyst Sentiment: BYDDF is currently trading near its 52-week low with limited analyst coverage. TSLA is also trading below its 52-week high, with analysts holding a \"hold\" consensus rating and an average price target below the current price, indicating cautious sentiment. NIO is trading near its 52-week low, but analyst sentiment is generally positive with a \"buy\" consensus rating and an average price target suggesting substantial upside, despite its current financial challenges.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#financial-news","title":"Financial News","text":"<p>Recent news highlights BYD's aggressive market strategy, its impact on the EV industry, and evolving regulatory and international dynamics.</p> <ul> <li> <p>Supply Chain Stability (2025-06-11): BYD, Xiaomi, Great Wall Motors, and other major Chinese automakers have jointly committed to supplier payment terms not exceeding 60 days. This initiative, reported by Shanghai Metals Market, aims to stabilize the automotive supply chain and enhance efficiency, potentially improving BYD's cash flow management and ensuring a more reliable production ecosystem.</p> </li> <li> <p>Intensified Price War and Regulatory Scrutiny (Multiple Sources, June 2025):</p> <ul> <li>ET Auto (2025-06-10): BYD's aggressive discounting has intensified the EV price war in China, alarming Beijing due to concerns about industry consolidation, profit erosion, and the international reputation of Chinese car manufacturers. Beijing is reportedly intervening to stabilize the situation.</li> <li>MENAFN (2025-06-09): Competition among China's top EV makers, including BYD, is escalating due to both the ongoing price war and an unspecified \"emissions dispute.\"</li> <li>Electrek (2025-06-06): Following another round of price cuts, BYD faces backlash from Chinese officials and regulators warning that the price war is \"out of control.\"</li> <li>Bloomberg (2025-06-06): Chinese officials summoned major EV makers, including BYD, urging them to self-regulate to address the prolonged price war.</li> <li>Relevance: These reports are critical for BYD, indicating potential government intervention to curb the price war, which could directly impact BYD's pricing strategy, sales volume, and profit margins. While aggressive pricing has helped BYD gain market share, regulatory pushback might necessitate a change in strategy, affecting its competitive advantage and financial performance.</li> </ul> </li> <li> <p>Corporate Governance (2025-06-06): BYD Company Limited announced the successful passing of key financial resolutions at its Annual General Meeting (AGM) for 2024, as reported by TipRanks. This provides a level of stability and direction for BYD's financial operations and investor confidence.</p> </li> <li> <p>International Expansion &amp; Competitive Threat (Multiple Sources, May-June 2025):</p> <ul> <li>Outlook Business (2025-06-05): BYD is making significant inroads into India's electric mobility market with its premium technology and pricing power, outpacing competitors like Tesla.</li> <li>The Motley Fool (2025-06-04): BYD's performance and competitive actions are creating further challenges for Tesla in the global EV market.</li> <li>Seeking Alpha (2025-05-29): Discussions highlight BYD's sales growth, challenges with margins, and its plans for global expansion, suggesting opportunities for international market share gains.</li> <li>Relevance: These reports emphasize BYD's successful international expansion and growing competitive threat to global EV players. Strong performance in high-growth markets like India and continued ability to challenge market leaders suggest significant potential for diversified revenue streams and global market share gains, potentially offsetting domestic margin pressures.</li> </ul> </li> <li> <p>Financial Stability Reassurance (2025-05-30): A BYD executive stated to Reuters that mainstream Chinese automakers do not face the same \"Evergrande\" risk, aiming to reassure investors about the financial stability of BYD and the broader Chinese automotive sector.</p> </li> <li> <p>Market Reaction &amp; EV Initiatives (Yahoo Finance, 2025-05-23/27): Shares in Chinese automakers, including BYD, tumbled in late May following industry news. Concurrently, initiatives to boost grid capacity and provide financial benefits to EV owners were reported. Relevance: The share price tumble indicates negative investor sentiment likely due to the broader industry news (e.g., price war). However, broader initiatives to support EV infrastructure and ownership could be a positive long-term driver for BYD's sales and market growth.</p> </li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#contextual-considerations","title":"Contextual Considerations","text":""},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#comprehensive-risk-assessment-for-byddf","title":"Comprehensive Risk Assessment for BYDDF","text":"<p>This report synthesizes risk assessments from specialized agents (Geopolitical, Regulatory, Macroeconomic, and Climate) to provide a comprehensive view of potential challenges facing BYDDF, focusing on their implications for the company's financial summary.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#1-geopolitical-risks","title":"1. Geopolitical Risks","text":"<p>BYDDF, a China-based EV and battery manufacturer with significant international ambitions, faces substantial geopolitical headwinds.</p> <ul> <li>Policy Instability: Escalating U.S.-China trade tensions and tightening Chinese government controls on outbound investments directly impact BYDDF's international expansion, as evidenced by delayed Latin American projects. This uncertainty can limit future revenue streams and negatively affect investor confidence, potentially contributing to the stock trading near its 52-week low and its current low P/E ratio of 8.50.</li> <li>Global Supply Chain Disruptions: As a major manufacturer, BYDDF relies on a stable supply chain. Geopolitical tensions can lead to restrictions or tariffs on critical raw materials and components, which would directly compress its 5.45% profit margin, disrupt production schedules, and dampen its impressive 36.30% quarterly revenue growth.</li> <li>Regional Conflicts or Sanctions: Its global presence exposes BYDDF to risks from regional conflicts or new sanctions on Chinese EV or battery manufacturers. Such events could severely curtail sales or operations, impacting revenue, profit margin, and ROE.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#2-regulatory-risks","title":"2. Regulatory Risks","text":"<p>BYDDF navigates a complex and evolving global regulatory landscape, posing significant operational and financial risks.</p> <ul> <li>New Sectoral Regulation: The dynamic EV industry is prone to new regulations. Changes or reductions in EV subsidies and incentives could directly impact demand for BYDDF's products, affecting its 36.30% quarterly revenue growth. New trade tariffs or import restrictions could increase costs in key export markets, reducing competitiveness. Stricter emission or safety standards could necessitate significant R&amp;D investment, impacting the 5.45% profit margin.</li> <li>Ongoing Compliance Obligations: As a global automotive player, BYDDF faces continuous compliance costs related to vehicle safety, environmental regulations (emissions, battery disposal), product liability, and labor laws. Non-compliance can lead to substantial fines, product recalls, and reputational damage, negatively impacting the company's 5.45% profit margin and 23.07% ROE.</li> <li>Dependency on Licensed Operations: Automobile manufacturing requires various licenses and permits globally. Changes to licensing requirements, delays in obtaining new licenses for expansion, or revocations could severely disrupt BYDDF's operations, leading to production halts and inability to sell vehicles, directly impacting revenue and profitability.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#3-macroeconomic-risks","title":"3. Macroeconomic Risks","text":"<p>Broader economic trends present both opportunities and challenges for BYDDF's financial performance.</p> <ul> <li>Inflation and Central Bank Policy: Rising inflation increases BYDDF's operational costs (raw materials, labor), potentially eroding its 5.45% profit margin if cost increases cannot be fully offset. Aggressive interest rate hikes by central banks to curb inflation could lead to an economic slowdown, further impacting consumer discretionary spending on vehicles.</li> <li>Interest Rate Sensitivity: Higher interest rates can dampen consumer demand for new vehicles by increasing loan payments, despite BYDDF's strong 36.30% quarterly revenue growth. While the low Debt-to-Equity ratio (16.71%) mitigates direct impact on the company's borrowing costs, the risk to broader consumer demand remains significant.</li> <li>FX Volatility: As a Chinese company with international operations, BYDDF is exposed to exchange rate fluctuations. A strengthening CNY could make its exports more expensive, while a weakening CNY could increase import costs, impacting its 5.45% profit margin.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#4-climate-risks","title":"4. Climate Risks","text":"<p>BYDDF is at the forefront of the low-carbon transition but also faces specific climate-related challenges.</p> <ul> <li>Carbon Emissions Exposure &amp; Transition: BYDDF's core business in EVs and renewable energy positions it to benefit from the low-carbon transition, contributing to its 36.30% quarterly revenue growth and 23.07% ROE. However, as a major manufacturer, it faces inherent carbon emissions exposure from its operations and supply chain. Failure to meet its ambitious carbon neutrality targets could lead to increased operational costs (e.g., carbon taxes), reputational damage, and loss of market share.</li> <li>Regulatory ESG Disclosure Risk: BYDDF is actively engaging in ESG reporting. The risk lies in the evolving global landscape of ESG regulations, which may require more comprehensive and independently verified disclosures. Inaccurate or non-compliant disclosures could lead to regulatory fines, legal challenges, and a loss of investor confidence.</li> <li>Physical Climate Risk: As a large-scale manufacturer, BYDDF is inherently exposed to disruptions from extreme weather events (e.g., drought, flooding) that could lead to production delays, increased operating costs, and impact revenue and profitability.</li> </ul>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#overall-risk-landscape-assessment","title":"Overall Risk Landscape Assessment","text":"<p>Considering the interconnectedness and severity of the identified risks, particularly those related to geopolitical tensions, evolving regulatory environments (especially for EVs and trade), and macroeconomic pressures (inflation, interest rates), the overall risk landscape for BYDDF appears to be Medium to High Risk.</p> <p>While the company demonstrates strong financial performance with impressive revenue growth (36.30%), healthy ROE (23.07%), and a low Debt-to-Equity ratio (16.71%), these strengths are challenged by significant external factors. The stock trading near its 52-week low and its low P/E ratio (8.50) suggest that the market is already pricing in some of these concerns.</p>"},{"location":"sample_reports/example_report_BYDD_gemini_flash_2_5/#final-recommendation","title":"Final Recommendation","text":"<p>BYDDF presents a compelling investment case characterized by robust fundamentals and strong growth prospects, yet it operates within a complex and challenging external environment.</p> <p>Strengths: *   Strong Financial Health: Excellent revenue growth (36.30% quarterly), healthy profit margins (5.45%), and exceptional ROE (23.07%) demonstrate high operational efficiency and profitability. *   Solid Balance Sheet: A very low Debt-to-Equity ratio (16.71) indicates financial stability and low leverage compared to peers like NIO. *   Competitive Edge: BYDDF is aggressively gaining market share globally, particularly in emerging markets like India, and is a dominant force in the EV sector, challenging established players like Tesla. *   Potential Undervaluation: Trading near its 52-week low with a P/E ratio of 8.50, especially in light of its strong fundamentals, suggests the stock may be undervalued.</p> <p>Challenges &amp; Risks: *   Intense Price War: BYD's aggressive pricing strategy, while boosting market share, is eroding industry profits and has drawn concern and potential intervention from Chinese regulators, which could impact future margins and growth strategy. *   Geopolitical Headwinds: U.S.-China trade tensions, supply chain disruptions, and potential sanctions pose significant risks to international expansion and profitability. *   Regulatory Scrutiny: Beyond the price war, evolving EV subsidies, trade tariffs, and ongoing compliance obligations in a dynamic regulatory landscape present continuous operational and financial challenges. *   Macroeconomic Pressures: Inflation, interest rate sensitivity, and FX volatility could impact consumer demand and operational costs.</p> <p>Overall Assessment:</p> <p>BYDDF stands out as a fundamentally strong company with impressive growth and profitability, positioning it as a leader in the global EV market. Its current valuation near its 52-week low, coupled with a low P/E ratio, suggests an attractive entry point for long-term investors.</p> <p>However, the significant external pressures from the ongoing price war, potential regulatory intervention, and broader geopolitical risks cannot be understated. These factors introduce a higher degree of uncertainty and could temper future growth or profitability.</p> <p>Recommendation:</p> <p>Based on the comprehensive analysis, BYDDF is recommended as a \"Long-Term Buy\" for investors with a moderate to high-risk tolerance. The company's strong financial performance, healthy balance sheet, and aggressive global expansion strategy provide a solid foundation. However, investors should closely monitor developments related to the EV price war, Chinese regulatory actions, and geopolitical tensions, as these will be critical determinants of BYDDF's short-to-medium term performance. The current market price appears to undervalue its inherent strengths, presenting a potentially compelling opportunity despite the external headwinds.</p>"}]}